//Title:	dwCreateIKArm.mel
//Author: 	David Walden
//		www.davidwalden.com
//		dwalden74@hotmail.com
//Dates: March 18 2004
//
//
//Description: PROCEDURE CREATES IKARM - copied from dwCreateIKFKArm.mel, this creates ONLY an IK arm. I was thinking of
//		putting this directly into dwCreateIKFKArm, but that script is already too complicated, so this way should be
//		cleaner and easier to understand.

global proc dwCreateIKArm (string $bindingShoulder,			//1st argument...
				int $middleShoulderJoints, 		//2
				int $forearmSplitJoints, 		//3
				int $sideFlagInt, 			//4
				int $elbowAxisInt,			//5
				int $stretchCheck, 			//6
				int $controlColor,			//7
				int $shoulderTypeCheck,			//8
				int $standardShoulderControlType,	//9
				int $FKArmControlType,			//10
				int $stretchAxis, 			//11
				int $fkShldrRotateOrder, 		//12
				int $wristCntrlRotateOrder,		//13
				string $namingPrefix)				//14
{
//Turn cycleCheck off. Stretchy calculations sometimes create cycle warnings on some joints' ".matrix" attr. 
//This is not a problem when animating, however.
cycleCheck -e 0;


//Assign $prefix.
string $prefix = dwRTAssignPrefix ($namingPrefix, $sideFlagInt);


//ASSIGN $ELBOWAXIS.
string $elbowAxis;
if ($elbowAxisInt == 1)
	{$elbowAxis = "X";}
if ($elbowAxisInt == 2)
	{$elbowAxis = "Y";}
if ($elbowAxisInt == 3)
	{$elbowAxis = "Z";}
if (! $elbowAxisInt)
	error "Elbow´s preferred axis is not selected in UI.";


//Report errors if shoulder joint is specified incorrectly.
if (! `size $bindingShoulder`)
	error ("No shoulder joint specified in UI. Try again.");
if (! `objExists $bindingShoulder`)
	error ("No shoulder joint found with given name (\"" + $bindingShoulder + "\"). Try again.");


//GET CURRENT JOINT HIERARCHY.	
string $bindingElbowJoint[];
string $shoulderJoints[];			//Array which contains all binding "shoulder" joints (including first shoulder joint).
string $shoulderJointsTemp[];			//temp array.
$shoulderJoints[0] = $bindingShoulder;		//Assign first member to the first shoulder joint.
int $b;						//Counter integer.

//Allow negative joint lengths in first arm joint.
//dwReportErrorNegativeJointLength ($shoulderJoints[0]);

if ($middleShoulderJoints)
	{
	for ($b = 0; $b < $middleShoulderJoints; $b++)
		{
		$shoulderJointsTemp = `listRelatives -pa -c -type joint $shoulderJoints[$b]`;	//Place all immediate children into temp array.
		dwReportErrorNegativeJointLength ($shoulderJointsTemp[0]);
		
		$shoulderJoints[$b + 1] = $shoulderJointsTemp[0];				//Put child into real array.
		}
	
	$bindingElbowJoint = `listRelatives -pa -c -type joint $shoulderJoints[$b]`;	
	dwReportErrorNegativeJointLength ($bindingElbowJoint[0]);
	}

else if (! $middleShoulderJoints)
	{
	$bindingElbowJoint = `listRelatives -pa -c -type joint $bindingShoulder`;
	dwReportErrorNegativeJointLength ($bindingElbowJoint[0]);
	}
	
string $forearmJoints[];			//Array which contains all binding "forearm" joints (does NOT include bindingElbow).
string $forearmJointsTemp[];			//temp array.
string $bindingWristJoint[];

if ($forearmSplitJoints)
	{
	$forearmJointsTemp = `listRelatives -pa -c -type joint $bindingElbowJoint[0]`;
	dwReportErrorNegativeJointLength ($forearmJointsTemp[0]);
	
	//Assign first forearm joint as array index zero;
	$forearmJoints[0] = $forearmJointsTemp[0];
	for ($b = 1; $b < $forearmSplitJoints; $b++)
		{
		$forearmJointsTemp = `listRelatives -pa -c -type joint $forearmJoints[$b - 1]`;	//Place all immediate children into temp array.
		$forearmJoints[$b] = $forearmJointsTemp[0];					//Put child into real array.						
		}
	$bindingWristJoint = `listRelatives -pa -c -type joint $forearmJoints[$b - 1]`;
	dwReportErrorNegativeJointLength ($bindingWristJoint[0]);
	}
else if (! $forearmSplitJoints)
	{
	$bindingWristJoint = `listRelatives -pa -c -type joint $bindingElbowJoint[0]`;
	dwReportErrorNegativeJointLength ($bindingWristJoint[0]);
	}

string $bindingHandJoint[] = `listRelatives -pa -c -type joint $bindingWristJoint[0]`;

dwReportErrorNegativeJointLength ($bindingHandJoint[0]);

//IF `LISTRELATIVES` COMMAND RETURNED ZERO (IF THE CHAIN ENDED), REPORT AN ERROR.
if (size($bindingHandJoint) == 0)
	error "Setup must contain hand joint parented to the wrist joint.";





//ASSIGN NEW STRINGS (NOT ARRAYS) TO BINDING HIERARCHY.
string $bindingElbow = $bindingElbowJoint[0];
string $bindingWrist = $bindingWristJoint[0];
string $bindingHand = $bindingHandJoint[0];


$bindingShoulder = $shoulderJoints[0];


string $clavicleJointArray[] = `listRelatives -pa -p -type joint $bindingShoulder`;
string $clavicleJoint;
string $torsoJoint[];

//Assign clavicle variables.
if (($shoulderTypeCheck == 1) || ($shoulderTypeCheck == 2))
	{
	$clavicleJoint = $clavicleJointArray[0];
	$torsoJoint = `listRelatives -pa -p -type joint $clavicleJoint`;
	if (! `size($torsoJoint)`)
		error "No torso joint in hierarchy.";
	}


//DUPLICATE BINDING ARM AND CREATE IK ARM;
string $ikShoulder;
string $ikElbow;
string $ikWrist;
string $ikHand;

string $IKHierarchy[] = `duplicate -rc -rr $bindingShoulder`;
$ikShoulder = $IKHierarchy[0];
$ikShoulder = `rename $ikShoulder ($prefix + "IKUpperArm")`;
//DELETE OTHER OBJECTS THAT MAY BE PARENTED TO SHOULDER.
dwDeleteBadChildren($ikShoulder, "joint");

if ($middleShoulderJoints)
	{
	//REMOVE EACH MIDDLE SHOULDER JOINT (NOT NECESSARY FOR IK HIERARCHY).
	string $ikMiddleShoulder[];
	for ($b = 0; $b < $middleShoulderJoints; $b++)
		{
		$ikMiddleShoulder = `listRelatives -pa -c -type joint $ikShoulder`;
		dwDeleteBadChildren($ikMiddleShoulder[0], "joint");
		removeJoint $ikMiddleShoulder[0];
		}
	}
	
	
string $ikElbowJoint[] = `listRelatives -pa -c -type "joint" $ikShoulder`;
$ikElbow = `rename $ikElbowJoint[0] ($prefix + "IKElbow")`;
//DELETE OTHER OBJECTS THAT MAY BE PARENTED TO ELBOW.
dwDeleteBadChildren($ikElbow, "joint");

if ($forearmSplitJoints)
	{
	//REMOVE EACH FOREARM JOINT (NOT NECESSARY FOR IK HIERARCHY).
	string $ikForearm[];
	for ($b = 0; $b < $forearmSplitJoints; $b++)
		{
		$ikForearm = `listRelatives -pa -c -type "joint" $ikElbow`;
		//DELETE OTHER OBJECTS THAT MAY BE PARENTED TO FOREARM.
		dwDeleteBadChildren($ikForearm[0], "joint");
		removeJoint $ikForearm[0];
		}
	}

string $ikWristJoint[] = `listRelatives -pa -c -type "joint" $ikElbow`;
$ikWrist = `rename $ikWristJoint[0] ($prefix + "IKWrist")`;
//DELETE OTHER OBJECTS THAT MAY BE PARENTED TO IK WRIST.
dwDeleteBadChildren($ikWrist, "joint");

string $ikHandJoint[] = `listRelatives -pa -c -type "joint" $ikWrist`;
$ikHand = `rename $ikHandJoint[0] ($prefix + "IKHand")`;
//DELETE OTHER OBJECTS THAT MAY BE PARENTED TO IK WRIST.
dwDeleteBadChildren($ikHand, "joint");

//CHECK TO SEE IF CHAIN HAS ANY FURTHER CHILDREN (JOINTS OR OTHER). IF SO, DELETE THEM.
string $handChildJoints[] = `listRelatives -c -fullPath $ikHand`;
if (size($handChildJoints) > 0)
	delete $handChildJoints;
	

//ADD IK HANDLE TO IK ARM;
string $ikHandleIKArm[] = `ikHandle 
				-solver ikRPsolver
				-n ($prefix + "IKArm_IKHandle") 
				-sj $ikShoulder 
				-ee $ikWrist`;
setAttr ($ikHandleIKArm[0] + ".stickiness") 1;






//CONNECT IK CHAIN´S ROTATIONS TO BINDING CHAIN. LOCK UNNECESSARY ROTATIONS ON BINDING CHAIN.
//NOTE: WE COULD ALSO USE ORIENT CONSTRAINTS HERE, AS THERE IS NO ROTATION ORDER ATTR TO MODIFIY (LIKE IN AN FK SETUP).
connectAttr -f ($ikShoulder + ".ry") ($bindingShoulder + ".ry");
connectAttr -f ($ikShoulder + ".rz") ($bindingShoulder + ".rz");
if ($middleShoulderJoints)
	{
	//DISTRIBUTE X-ROTATION AMONG THE SHOULDER JOINTS.
	dwDistributeRotations ($ikShoulder,
				"rx",
				$shoulderJoints,
				"rx",
				($prefix + "UpperArm_XRot_Divide"));
	
	//OLD: LOCK AND HIDE ATTRIBUTES FOR SHOULDER JOINTS.
	//This will NOT work on referenced skeletons, so it is currently disabled.
	//for ($b = 0; $b < $middleShoulderJoints; $b ++)			
	//	{
	//	dwLockHideAttributes (0, 1, $shoulderJoints[$b + 1], "ry rz");
	//	}
	}
		
if (! $middleShoulderJoints)
	{connectAttr -f ($ikShoulder + ".rx") ($bindingShoulder + ".rx");}


connectAttr -f ($ikElbow + ".rx") ($bindingElbow + ".rx");
connectAttr -f ($ikElbow + ".ry") ($bindingElbow + ".ry");
connectAttr -f ($ikElbow + ".rz") ($bindingElbow + ".rz");	

if ($forearmSplitJoints)
	{
	dwDistributeRotations ($ikWrist,
				"rx",
				$forearmJoints,
				"rx",
				($prefix + "Forearm_XRot_Divide"));
	}


connectAttr -f ($ikWrist + ".ry") ($bindingWrist + ".ry");
connectAttr -f ($ikWrist + ".rz") ($bindingWrist + ".rz");
if (! $forearmSplitJoints)
	connectAttr -f ($ikWrist + ".rx") ($bindingWrist + ".rx");
if ($forearmSplitJoints)
	setAttr ($ikWrist + ".rotateOrder") 1;
	

//GET THE *ABSOLUTE VALUE* OF THE LENGTH OF THE ELBOW WHICH WILL DETERMINE THE SIZE OF OUR CONTROL SPLINE OBJECTS LATER.
float $armLengthValue = `getAttr ($ikElbow + ".tx")`;
$armLengthValue = abs($armLengthValue);




//ADD SPLINE CUBE OBJECT TO IK WRIST. PARENT IKHANDLE TO CONTROL OBJECT. 
string $controlShapeTemp = `curve -d 1 
	-p ($armLengthValue/3) ($armLengthValue/3) (-$armLengthValue/3) 
	-p ($armLengthValue/3) (-$armLengthValue/3) (-$armLengthValue/3) 
	-p ($armLengthValue/3) (-$armLengthValue/3) ($armLengthValue/3) 
	-p ($armLengthValue/3) ($armLengthValue/3) ($armLengthValue/3) 
	-p ($armLengthValue/3) ($armLengthValue/3) (-$armLengthValue/3) 
	-p (-$armLengthValue/3) ($armLengthValue/3) (-$armLengthValue/3) 
	-p (-$armLengthValue/3) (-$armLengthValue/3) (-$armLengthValue/3) 
	-p ($armLengthValue/3) (-$armLengthValue/3) (-$armLengthValue/3) 
	-p (-$armLengthValue/3) (-$armLengthValue/3) (-$armLengthValue/3) 
	-p (-$armLengthValue/3) (-$armLengthValue/3) ($armLengthValue/3) 
	-p (-$armLengthValue/3) ($armLengthValue/3) ($armLengthValue/3) 
	-p (-$armLengthValue/3) ($armLengthValue/3) (-$armLengthValue/3) 
	-p (-$armLengthValue/3) ($armLengthValue/3) ($armLengthValue/3) 
	-p ($armLengthValue/3) ($armLengthValue/3) ($armLengthValue/3) 
	-p ($armLengthValue/3) (-$armLengthValue/3) ($armLengthValue/3) 
	-p (-$armLengthValue/3) (-$armLengthValue/3) ($armLengthValue/3) 
	-p ($armLengthValue/3) (-$armLengthValue/3) ($armLengthValue/3) 
	-p ($armLengthValue/3) (-$armLengthValue/3) (-$armLengthValue/3)
	-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17`;

string $ikWristControl = `rename ($prefix + "IKArm_Control")`;
setAttr ($ikWristControl + ".showManipDefault") 1;
	
float $wristPosition[] = `xform -q -ws -t $ikWrist`;
move -a $wristPosition[0] $wristPosition[1] $wristPosition[2] $ikWristControl;

//Orient the control to the wrist joint. Not really important but does look nicer in the viewport.
string $wristControlConstraint[] = `orientConstraint $ikWrist $ikWristControl`;
delete $wristControlConstraint;

//parent $ikWristControl $ikWristControlCompensateGrp;
makeIdentity -apply true -t 1 -r 1 $ikWristControl;
dwLockHideAttributes (0, 0, $ikWristControl, "rx ry rz sx sy sz v");
parent $ikHandleIKArm[0] $ikWristControl;
setAttr ($ikHandleIKArm[0] + ".v") 0;

//ADD OVERRIDE COLOR SCHEME TO FK CONTROL BOX.
if ($controlColor > 1)
	{
	setAttr ($ikWristControl + ".overrideEnabled") 1;
	setAttr ($ikWristControl + ".overrideColor") ($controlColor - 1);
	}


//ADD POLE VECTOR TO IK ARM; PLACE IT IKARM´S ELBOW JOINT. USER CAN REPOSITION THIS AFTER EXECUTING SCRIPT.

float $elbowPosition[] = `xform -q -ws -t $ikElbow`;
createNode implicitSphere;
pickWalk -d up;
string $poleVectorIKArm = `rename ($prefix + "IKArm_PoleVector")`;
setAttr ($poleVectorIKArm + ".showManipDefault") 1;

dwLockHideAttributes (0, 0, $poleVectorIKArm, "rx ry rz sx sy sz v");
	
move -a $elbowPosition[0] $elbowPosition[1] $elbowPosition[2] $poleVectorIKArm;

string $poleVectorIKArmCompensateGrp = `group -em -n ($poleVectorIKArm + "_CompensateGrp")`;
move -a $elbowPosition[0] $elbowPosition[1] $elbowPosition[2] $poleVectorIKArmCompensateGrp;
dwLockHideAttributes (0, 0, $poleVectorIKArmCompensateGrp, "rx ry rz sx sy sz v");

parent $poleVectorIKArm $poleVectorIKArmCompensateGrp;
makeIdentity $poleVectorIKArm;

addAttr -longName "Control_Radius" -at double -min 0 -max 50 -defaultValue 1 -keyable 1 $poleVectorIKArm;
connectAttr ($poleVectorIKArm + ".Control_Radius") ($poleVectorIKArm + "Shape.radius");
setAttr ($poleVectorIKArm + ".Control_Radius") ($armLengthValue/6);

poleVectorConstraint $poleVectorIKArm $ikHandleIKArm[0];

//Add color scheme to Pole Vector.
if ($controlColor > 1)
	{
	setAttr ($poleVectorIKArm + ".overrideEnabled") 1;
	setAttr ($poleVectorIKArm + ".overrideColor") ($controlColor - 1);
	}


//ADD CONTROL OBJECT TO CONTROL WRIST and ASSIGN VARIABLE. 
//HAND IS AUTO-ORIENTED BY DEFAULT (IE, FOLLOWS MOVEMENT OF ARM), OR CAN BE ORIENTED TO EXTERNAL LOCATOR ("Free_Orient").
//STEP 1: GENERATE HAND CONTROL BOX (SIMILAR TO FK CONTROL OBJECTS ON FK ARM) AND SET APPROPRIATE ATTRIBUTES.
float $handPosition[] = `xform -q -ws -t $bindingHand`;
select -cl;
curve -d 1 -p $wristPosition[0] $wristPosition[1] $wristPosition[2] -p $handPosition[0] $handPosition[1] $handPosition[2] -k 0 -k 1;
string $measureCurve[] = `ls -sl`;
createNode curveInfo -n curveInfoMeasure;
connectAttr ($measureCurve[0] + ".worldSpace") curveInfoMeasure.inputCurve;
float $controlBoxLength = `getAttr curveInfoMeasure.arcLength`;
delete curveInfoMeasure;
delete $measureCurve[0];
curve -d 1 
	-p ($controlBoxLength * 3)  (($armLengthValue/3)/2) (-$armLengthValue/3) 
	-p ($controlBoxLength * 3) ((-$armLengthValue/3)/2) (-$armLengthValue/3) 
	-p ($controlBoxLength * 3) ((-$armLengthValue/3)/2) ($armLengthValue/3) 
	-p ($controlBoxLength * 3) (($armLengthValue/3)/2) ($armLengthValue/3) 
	-p ($controlBoxLength * 3) (($armLengthValue/3)/2) (-$armLengthValue/3) 
	-p 0 (($armLengthValue/3)/2) (-$armLengthValue/3) 
	-p 0 ((-$armLengthValue/3)/2) (-$armLengthValue/3) 
	-p ($controlBoxLength * 3) ((-$armLengthValue/3)/2) (-$armLengthValue/3) 
	-p 0 ((-$armLengthValue/3)/2) (-$armLengthValue/3) 
	-p 0 ((-$armLengthValue/3)/2) ($armLengthValue/3) 
	-p 0 (($armLengthValue/3)/2) ($armLengthValue/3) 
	-p 0 (($armLengthValue/3)/2) (-$armLengthValue/3) 
	-p 0 (($armLengthValue/3)/2) ($armLengthValue/3) 
	-p ($controlBoxLength * 3) (($armLengthValue/3)/2) ($armLengthValue/3) 
	-p ($controlBoxLength * 3) ((-$armLengthValue/3)/2) ($armLengthValue/3) 
	-p 0 ((-$armLengthValue/3)/2) ($armLengthValue/3) 
	-p ($controlBoxLength * 3) ((-$armLengthValue/3)/2) ($armLengthValue/3) 
	-p ($controlBoxLength * 3) ((-$armLengthValue/3)/2) (-$armLengthValue/3)
	-k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 ;

string $controlBox[] = `ls -sl`;
string $controlWristControl = `rename $controlBox[0] ($prefix + "Hand_Control")`;
setAttr ($controlWristControl + ".showManipDefault") 2;

//We don´t want to scale the cntrl obj, as previously thought. We don´t want to limit ourselves to a specific axis!
//scale -r 2 0.5 1.5 $controlWristControl;
//makeIdentity -apply true -scale 1 $controlWristControl;

if ($stretchCheck)
	{
	addAttr -ln "Stretch" -dv 1 -at double -k true $controlWristControl;
	connectAttr ($controlWristControl + ".Stretch") ($bindingWrist + ".sx");
	}

if ($forearmSplitJoints)
	{
	setAttr ($controlWristControl + ".rotateOrder") 1;
	}
if ($controlColor > 1)
	{
	setAttr ($controlWristControl + ".overrideEnabled") 1;
	setAttr ($controlWristControl + ".overrideColor") ($controlColor - 1);
	}

//STEP 2: CREATE HAND AUTO-ORIENT GROUP NODES AND MAKE NECESSARY CONSTRAINTS TO CONTROL ARM.
string $wristAutoOrientGrp1 = `group -em -n ($ikWrist + "_AutoOrientGrp1")`;
string $wristAutoOrientGrp2 = `group -em -n ($ikWrist + "_AutoOrientGrp2")`;

move -a $elbowPosition[0] $elbowPosition[1] $elbowPosition[2] $wristAutoOrientGrp1;
move -a $wristPosition[0] $wristPosition[1] $wristPosition[2] $wristAutoOrientGrp2;


	//ORIENT CONSTRAIN GRP1 TO $controlElbow
	pointConstraint $ikElbow $wristAutoOrientGrp1;
	orientConstraint $ikElbow $wristAutoOrientGrp1;

	//POINT CONSTRAIN AND ORIENT GRP2 TO $controlWrist.
	pointConstraint $ikWrist $wristAutoOrientGrp2;
	string $orientConstraintTemp[] = `orientConstraint $bindingWrist $wristAutoOrientGrp2`;
		delete $orientConstraintTemp[0];
	
	//PARENT GROUP NODES.
	parent $wristAutoOrientGrp2 $wristAutoOrientGrp1;
	
	dwLockHideAttributes (0, 0, $wristAutoOrientGrp1, "tx ty tz rx ry rz sx sy sz v");
	dwLockHideAttributes (0, 0, $wristAutoOrientGrp2, "tx ty tz rx ry rz sx sy sz v");



//STEP 3: CREATE WRIST ORIENTATION. DEFAULT IS AUTO ORIENT, WITH ADDITIONAL "ORIENT TO OBJECT" ATTRIBUTE.
string $hand2LocOrientGrp = `group -em -n ($prefix + "Hand_2_Object_Orient_Grp")`;
//OLD: MUST BE CONSTRAINED TO IKWRIST:    pointConstraint $bindingWrist $hand2LocOrientGrp;
pointConstraint $ikWrist $hand2LocOrientGrp;
string $handOrientLocator[] = `spaceLocator -n ($prefix + "Hand_Orient_Locator")`;
move -a $handPosition[0] $handPosition[1] ($handPosition[2] - ($armLengthValue/8)) $handOrientLocator[0];
	string $orientConstraintTemp[] = `orientConstraint $bindingWrist $handOrientLocator[0]`;
	delete $orientConstraintTemp[0];
parent $handOrientLocator[0] $hand2LocOrientGrp;
dwLockHideAttributes (1, 0, $handOrientLocator[0], "tx ty tz sx sy sz v");

string $wristOrientGrp = `group -em -n ($prefix + "Wrist_Orient_Grp")`;
//OLD: MUST BE CONSTRAINED TO IKWRIST:   pointConstraint $bindingWrist $wristOrientGrp;	
pointConstraint $ikWrist $wristOrientGrp;

	$orientConstraintTemp = `orientConstraint $ikWrist $wristOrientGrp`;
	delete $orientConstraintTemp[0];


string $wristOrientConstraint[] = `orientConstraint $handOrientLocator[0] $wristAutoOrientGrp2 $wristOrientGrp`;
dwBlendByReverse ($controlWristControl, "Free_Orient", 
		($prefix + "Wrist_Orient_Reverse"), 
		($wristOrientConstraint[0] + "." + $handOrientLocator[0] + "W0"), 
		($wristOrientConstraint[0] + "." + $wristAutoOrientGrp2 + "W1"), 
		1);

//UPDATE FOR V. 5.0. SET "INTERPOLATION TYPE" OF ORIENT CONSTRAINT TO "SHORTEST". THIS SEEMS TO WORK WELL
//AS IT TRIES TO AVOID FLIPPING WHEN BLENDED ORIENTATION DIFFERENCES ARE TOO HIGH.
float $mayaVersion = `dwRT_GetMayaVersion`;
if ($mayaVersion >= 5.0)
	setAttr ($wristOrientConstraint[0] + ".interpType") 2;

parent $controlWristControl $wristOrientGrp;
makeIdentity $controlWristControl;

dwLockHideAttributes (0, 0, $wristOrientGrp, "tx ty tz rx ry rz sx sy sz v");

//Now orient constrain the ikWrist to the controlObj.
orientConstraint $controlWristControl $ikWrist;
setAttr ($controlWristControl + ".rotateOrder") $wristCntrlRotateOrder;

dwLockHideAttributes (0, 0, $controlWristControl, "tx ty tz sx sy sz v");




//IF USER CHOOSES "STRETCH JOINTS" IN UI, THEN CONNECT IK ARM X-TRANSLATION TO BINDING ARM, AND CREATE NODES 
//TO CONTROL X-TRANSLATION OF JOINTS.
if ($stretchCheck)
	{
	//MEASURE LENGTHS OF ALL JOINTS AND ASSIGN VARIABLES FOR STRETCHING.
	string $IKHandleName = $ikHandleIKArm[0];
	string $IKFKBlendAttribute = $controlWristControl + ".IKFK_Blend";
	
	float $forearmTXTemp[];
	if ($forearmSplitJoints)
		{
		for ($b = 0; $b < $forearmSplitJoints; $b++)
			{
			$forearmTXTemp[$b] = `getAttr ($forearmJoints[$b] + ".tx")`;
			}
		}
	
	float $shoulderTXTemp[];	//All ".tx" values for middle shoulder joints will be stored here.
	if ($middleShoulderJoints)
		{
		for ($b = 0; $b < $middleShoulderJoints; $b++)
			{
			//GET THE X-TRANSLATION OF EACH OF THE MIDDLE-SHOULDER JOINTS, THEN MAINTAIN THAT AS A PERCENTAGE OF THE 
			//OF THE TOTAL $SHOULDERLENGTH. HERE, $SHOULDERTXTEMP[0] WILL ACTUALLY BE ASSIGNED TO $SHOULDERJOINTS[1],
			//AS $SHOULDERJOINTS[0] IS THE FIRST SHOULDER JOINT.
			$shoulderTXTemp[$b] = `getAttr ($shoulderJoints[$b + 1] + ".tx")`;
			}
		}
	
	//GET THE LENGTH OF THE ARM.
	float $lengthIKElbow = dwRTGetDistance ($ikWrist, $ikElbow);
	float $lengthIKUpperArm = dwRTGetDistance ($ikElbow, $ikShoulder);
	
	
	//THIS TECHIQUE *TRANSLATES THE IK ARM HIERARCHY*, AND DOESN`T TOUCH THE *CONTROL* HIERARCHY. 
	//CONTROL JOINTS ARE CALCULATED AFTERWARDS USING "dwBlend2WeightedAttr.mel" SCRIPT...
	//HERE, ALL WE ARE DOING IS CALCULATING THE LENGTH OF THE IK ARM, 
	//THEN BLENDING THIS WITH THE FK ARM VIA THE "dwBlend2WeightedAttr.mel" SCRIPT.
	
	//CALCULATE MIDDLE SHOULDER JOINTS TRANSLATE-X AS A PERCENTAGE OF TOTAL SHOULDER JOINT.
	//LET THIS BE CALCULATED AUTOMATICALLY AS THE ARM IS STRETCHED.
	if ($middleShoulderJoints)
		{
		float $bicepDivideValue;	//Value determines percentage of each joints´ "tx".
		string $bicepPosition_Divide;	//multiplyDivide node for each middle shoulder joint.
		for ($b = 0; $b < $middleShoulderJoints; $b++)
			{
			//Calculate divide factor for each joint.
			$bicepDivideValue = $lengthIKUpperArm/$shoulderTXTemp[$b];
			
			//Create multiplyDivide node and set operation to "divide".
			$bicepPosition_Divide = `createNode -n ($prefix + "BicepPosition" + ($b + 1) + "_Divide") multiplyDivide`;
			setAttr ($bicepPosition_Divide + ".operation") 2;
			
			//Connect $ikElbow.tx to first input.
			connectAttr ($ikElbow + ".tx") ($bicepPosition_Divide + ".input1X");
			
			//Set value by which it will be divided.
			setAttr ($bicepPosition_Divide + ".input2X") $bicepDivideValue;
			
			//Connect this to corresponding shoulder joint (start with $shoulderJoints[$b + 1],
			//because $shoulderJoints[0] does not translate).
			connectAttr ($bicepPosition_Divide + ".outputX") ($shoulderJoints[$b + 1] + ".tx");
			}
		}
	
	//CALCULATE FOREARM JOINTS´ TRANSLATE-X AS A PERCENTAGE OF TOTAL SHOULDER JOINT.
	//LET THIS BE CALCULATED AUTOMATICALLY AS THE ARM IS STRETCHED.
	if ($forearmSplitJoints)
		{
		float $forearmDivideValue;	//Value determines the percentage of each joints´ tx.
		string $forearmPosition_Divide;	//multiplyDivide node.
		for ($b = 0; $b < $forearmSplitJoints; $b++)
			{
			//Calculate divide factor for each joint.
			$forearmDivideValue = $lengthIKElbow/$forearmTXTemp[$b];	
			
			//Create multiplyDivide node and set operation to "divide".
			$forearmPosition_Divide = `createNode -n ($prefix + "ForearmPosition" + ($b + 1) + "_Divide") multiplyDivide`;
				setAttr ($forearmPosition_Divide + ".operation") 2;
			
			//Connect $controlWrist to first input.
			connectAttr ($ikWrist + ".tx") ($forearmPosition_Divide + ".input1X");
			
			//Set value by which it will be divided.
			setAttr ($forearmPosition_Divide + ".input2X") $forearmDivideValue;
			
			//Connect this to corresponding forearm joint.
			connectAttr ($forearmPosition_Divide + ".outputX") ($forearmJoints[$b] + ".tx");
			}
		}
	
	
	//CALL dwRTCreateStretchIK. THIS DOES ALL THE STRETCHY WORK FOR US.
	dwRTCreateStretchyIK ($IKHandleName, $ikWristControl, ($prefix + "Arm"), 2);
	
	
	//POINT CONSTRAIN BINDING HIERARCHY TO IK HIERARCHY.
	pointConstraint -n ($prefix + "BindingElbowPointConstraint") $ikElbow $bindingElbow;
	pointConstraint -n ($prefix + "BindingWristPointConstraint") $ikWrist $bindingWrist;
	pointConstraint -n ($prefix + "BindingHandPointConstraint") $ikHand $bindingHand;
	
	} //END OF "IF ARMSTRETCH"...

//There is an update issue with the arm setup. Moving the ikControlObj forces the nodes to update correctly.
move -r 1 0 0 $ikWristControl;
move -r -1 0 0 $ikWristControl;



//CREATE SHOULDER SETUP IF SELECTED IN UI.
string $clavicleOrientGrp;
string $clavicleCompensateGrp;
string $standardShoulderControlOrientGrp;
string $clavicleFollowTorsoGrp;
string $autoShoulderOrientGrp;
string $shoulderControl;
if (($shoulderTypeCheck == 1) || ($shoulderTypeCheck == 2))
	{
	//If standard shoulder...
	if ($shoulderTypeCheck == 1)
		{
		//CREATE THE CLAVICLE (SHOULDER) CONTROL. CALL dwCreateFKControl TO BUILD CONSTRAINTS AND CONTROL OBJ.
		$standardShoulderControlOrientGrp = dwCreateFKControl ($clavicleJoint, 
								$bindingShoulder, 
								0, 
								1, 
								"orientConstrainRotations", 
								1, 
								0, 
								$standardShoulderControlType, 
								($armLengthValue/1.5),
								2,
								$prefix, "SHOULDER_CONTROL");
		
		$shoulderControl = ($prefix + "SHOULDER_CONTROL");
		if ($controlColor > 1)
			{
			setAttr ($shoulderControl + ".overrideEnabled") 1;
			setAttr ($shoulderControl + ".overrideColor") ($controlColor - 1);
			}
			
		//ADD GROUP NODE POINT/ORIENT-CONSTRAINED TO TORSO, WHICH WILL ALLOW CLAVICLE TO FOLLOW TORSO.
		$clavicleFollowTorsoGrp = `group -em -n ($shoulderControl + "_FollowGrp")`;
		pointConstraint $torsoJoint $clavicleFollowTorsoGrp;
		orientConstraint $torsoJoint $clavicleFollowTorsoGrp;
			
		parent $standardShoulderControlOrientGrp $clavicleFollowTorsoGrp;
			
		
		//Lock and hide attrs on clavicle compensate groups.
		dwLockHideAttributes (0, 0, $standardShoulderControlOrientGrp, "tx ty tz rx ry rz sx sy sz v");
		dwLockHideAttributes (0, 0, $clavicleFollowTorsoGrp, "tx ty tz rx ry rz sx sy sz v");
		
		//Lock and hide $clavicleJoint control obj translate values.
		dwLockHideAttributes (0, 0, $shoulderControl, "tx ty tz");
		}
		
	//Else if auto-shoulder...
	else if ($shoulderTypeCheck == 2)
		{
		//dwCreateAutoShoulder ($sideFlagInt, $namingPrefix, 1, $clavicleJoint, $ikHandleIKArm[0], $controlColor);
		$autoShoulderOrientGrp = dwCreateAutoShoulder ($prefix, $sideFlagInt, 1, $clavicleJoint, $ikHandleIKArm[0], $controlColor);
		//Add group node and parent for FKControls.
		if ($FKArmControlType > 1)
			{
			$clavicleOrientGrp = `group -em -n ($prefix + "Clavicle_OrientGrp")`;
			pointConstraint $clavicleJoint $clavicleOrientGrp;
			orientConstraint $clavicleJoint $clavicleOrientGrp;
			
			$clavicleCompensateGrp = `group -em -n ($prefix + "Clavicle_CompensateGrp")`;
			parent $clavicleCompensateGrp $clavicleOrientGrp;
			makeIdentity $clavicleCompensateGrp;
			}
		}
	}



//CLEANUP: PARENT ALL EXTRA CONTOL OBJECTS UNDER ONE LOCKED GROUP.
string $cleanUpGrp = `group -em -n ($prefix + "Arm_Controls")`;
dwLockHideAttributes (0, 0, $cleanUpGrp, "tx ty tz rx ry rz sx sy sz v");

if (($shoulderTypeCheck == 1) || ($shoulderTypeCheck == 2))
	{
	if ($shoulderTypeCheck == 1)
		{
		if ($FKArmControlType > 1)
			{
			parent $clavicleOrientGrp $cleanUpGrp;
			}
		parent $clavicleFollowTorsoGrp $cleanUpGrp;	
		}
	
	else if ($shoulderTypeCheck == 2)
		{
		if ($FKArmControlType > 1)
			{
			parent $clavicleOrientGrp $cleanUpGrp;
			}
		parent $autoShoulderOrientGrp $cleanUpGrp;	
		}
	}



parent $wristAutoOrientGrp1 
	$wristOrientGrp
	$poleVectorIKArmCompensateGrp
	$hand2LocOrientGrp
	$ikWristControl
	$cleanUpGrp;



//Turn cycleCheck back on.
cycleCheck -e 1;

//Select ik wrist control.
select -r $ikWristControl;

//Print messages.
print ("\n" + "\n" + $prefix + "arm setup complete. " + 
	$poleVectorIKArmCompensateGrp + " may need to be repositioned.\n" + 
	"Control objects can be resized by translating or scaling their CVs.\n");

} //END OF PROCEDURE.