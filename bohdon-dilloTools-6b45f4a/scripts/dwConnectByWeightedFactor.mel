//Title:	dwConnectByWeightedFactor.mel
//Author:	David Walden
//		www.davidwalden.com
//		dwalden74@hotmail.com
//
//Date: January 2003
//
//Description: Calculate a value based on two values weighted by an additional attribute. The second
//object.attribute is weighted with a reverse node. Got it???
//An expression for this would look like the following example:
// $controlKnee.tx = ($IKKnee.tx * $Object.BlendAttribute) + ($FKKnee.tx * (1 - $Object.BlendAttribute))

global proc dwConnectByWeightedFactor (string $targetObj, string $targetAttr, string $object1, string $obj1Attr, string $object2, string $obj2Attr, string $blendObj, string $blendAttr, string $reverseNode)
{			
//Create Multiply node for $object1 (if it doesn´t already exist).
string $obj1MultiplyNode;

//If it doesn´t exist, create $object1Multiply node.
if (! `objExists ($object1 + "_Multiply")`)
	{
$obj1MultiplyNode = `shadingNode -asUtility -n ($object1 + "_Multiply") multiplyDivide`;
	setAttr ($obj1MultiplyNode + ".operation") 1;
connectAttr ($object1 + "." + $obj1Attr) ($obj1MultiplyNode + ".input1X");
connectAttr ($blendObj + "." + $blendAttr) ($obj1MultiplyNode + ".input2X");
	}

//If it exists, assign variable anyway (needed below in this procedure).
if (`objExists ($object1 + "_Multiply")`)
	{
	$obj1MultiplyNode = ($object1 + "_Multiply");
	//print ("Connecting to existing " + $object1 + "_Multiply multiplyDivide node.\n");
	}


//If no reverse node exists, create one, give it the $reverseNode name, and connect $blendObj.$blendAttr to it.
if (! `objExists $reverseNode`)
	{
	string $newReverseNode = `shadingNode -asUtility -n $reverseNode reverse`;
	connectAttr ($blendObj + "." + $blendAttr) ($newReverseNode + ".inputX");
	}
	
	
//Create Multiply node for $object2. $Object2 and its multiply node use the reverse of the $blendObj.$blendAttr value (1 - blendValue).
string $obj2MultiplyNode = `shadingNode -asUtility -n ($object2 + "_Multiply") multiplyDivide`;
	setAttr ($obj2MultiplyNode + ".operation") 1;
connectAttr ($object2 + "." + $obj2Attr) ($obj2MultiplyNode + ".input1X");
connectAttr ($reverseNode + ".outputX") ($obj2MultiplyNode + ".input2X");


//Add the two multiply nodes together.
string $addNode = `shadingNode -asUtility -n ($targetObj + "_Add") plusMinusAverage`;
	setAttr ($addNode + ".operation") 1;
connectAttr ($obj1MultiplyNode + ".outputX") ($addNode + ".input1D[0]");
connectAttr ($obj2MultiplyNode + ".outputX") ($addNode + ".input1D[1]");


//Finally connect this to the $targetObj.$targetAttr.
connectAttr ($addNode + ".output1D") ($targetObj + "." + $targetAttr);

}