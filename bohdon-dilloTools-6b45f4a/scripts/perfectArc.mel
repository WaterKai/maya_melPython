/*
	perfectArc v. 1.65 created for Maya 2008

	Copyright (C) 2003 Simon Christen
	Edited by Bohdon Sayre
	bsayre@c.ringling.edu


	Last Updated: Jan, 2008

	Description:	perfectArc is a animation tool. You can track any object
			and see it's motion represented by a curve. In addition you
			can use the Spacer function which allows you to check your
			spacing

	Please report bugs and suggestions to bsayre@c.ringling.edu. Thank you.

	USE AND MODIFY AT YOUR OWN RISK!!
	
*/


global proc perfectArc ()
{

	string $SeemoosWindow = "SeemoosArcWindow" ;
	string $sel[] = `ls -sl` ;

	if ( size($sel) == 0 )
	{
		print "//error : Please select an object.\n" ;

	}

	else if (size($sel) > 1 )
	{
		print "//error : Please select ONLY one object.\n" ;

	}

	int $startCurve = `playbackOptions -q -min` ;
	int $endCurve = `playbackOptions -q -max`;
	
	int $startLoc ;
	int $endLoc ;
	
	if (`window -exists $SeemoosWindow`)
		deleteUI $SeemoosWindow ;

	window -tlb on -width 350 -height 215  -title "PerfectArc" $SeemoosWindow ;
	scrollLayout
    		-horizontalScrollBarThickness 0
    		-verticalScrollBarThickness   10;
 
	columnLayout -adjustableColumn true Base ;		
				
		rowLayout -nc 3 -cw3 160 80 80 -cl3 center center center ;
	
			
// CREATE ARC and Delete Buttons
			
			button -en on -w 160 -h 30 -l "Create Arc" -c ("SeemoosArcProc `intSliderGrp -q -v startCurveSLD` `intSliderGrp -q -v endCurveSLD` `radioButtonGrp -q -sl PivotPointrBG` `radioButtonGrp -q -sl PickColorrBG` `radioButtonGrp -q -sl SpacerOnOffrBG` `radioButtonGrp -q -sl NumbersBG` `floatSliderGrp -q -v NumbersYSLD` `radioButtonGrp -q -sl SpacerTyperBG` `intSliderGrp -q -v startLocSLD` `intSliderGrp -q -v endLocSLD` `intSliderGrp -q -v spacingSLD` `floatSliderGrp -q -v spacerSizeSLD` "+1+" "+0);		
			button -en on -w 80 -h 30 -l "Delete Curves" -c "DeleteCurves" DeleteCurveBT ;
			button -en on -w 80 -h 30 -l "Delete Spacers" -c "DeleteSpacers" DeleteSpacerBT ;

			setParent .. ;
			separator -st none -h 3 ;

		rowLayout -nc 1 -cw 1 320 -cal 1 center ;
			button -en on -w 160 -h 30 -l "Update Arcs" -c ("UpdateArcs `intSliderGrp -q -v startCurveSLD` `intSliderGrp -q -v endCurveSLD` `radioButtonGrp -q -sl PivotPointrBG` `radioButtonGrp -q -sl PickColorrBG` `radioButtonGrp -q -sl SpacerOnOffrBG` `radioButtonGrp -q -sl NumbersBG` `floatSliderGrp -q -v NumbersYSLD` `radioButtonGrp -q -sl SpacerTyperBG` `intSliderGrp -q -v startLocSLD` `intSliderGrp -q -v endLocSLD` `intSliderGrp -q -v spacingSLD` `floatSliderGrp -q -v spacerSizeSLD`");

			setParent ..;
			separator -st none -h 5;
						

		rowLayout -nc 2 -cw2 92 230 ;

			text -l "Selected Object:" -w 92 ;

			textField -bgc 0.9 0.9 0.9 -en off -w 230 -tx $sel[0] selObject ;
			
			setParent .. ;
			separator -st none -h 5 ;
		
// Curve Attributes

		frameLayout -label "Curve Settings" -collapse false -collapsable false ;
			columnLayout ;
			separator -st none -h 5 ;

			rowLayout -nc 2 -cw2 90 100 ;

			button -w 80 -l "Update Start" -c "intSliderGrp -e -v `playbackOptions -q -min` startCurveSLD" ;
			intSliderGrp -cw2 50 100 -v $startCurve -min `playbackOptions -q -min` -max `playbackOptions -q -max` -field true startCurveSLD ;
			
			setParent .. ;
			separator -st none -h 5 ;
			
			rowLayout -nc 2 -cw2 90 100 ;

			button -w 80 -l "Update End" -c "intSliderGrp -e -v `playbackOptions -q -max` endCurveSLD" ;
			intSliderGrp -cw2 50 100 -v $endCurve -min `playbackOptions -q -min` -max `playbackOptions -q -max` -field true endCurveSLD ;
			
			setParent .. ;

			separator -st none -h 5 ;

			radioButtonGrp 	-cw3 90 75 75 -cl3 right left left -numberOfRadioButtons 2 -sl 2
					-label "Arc at Object's:" -labelArray3 "Center" "Pivot Point" "Green" PivotPointrBG;

			separator -st none -h 5 ;

			radioButtonGrp 	-cw4 90 75 75 75 -cl4 right left left left -numberOfRadioButtons 3 -sl 1
					-label "Color:" -labelArray3 "Brown" "Yellow" "Green" PickColorrBG;

			separator -st none -h 5 ;
			setParent .. ;
		setParent Base ;

// ScriptJobs

		scriptJob -p $SeemoosWindow -e "SelectionChanged" "UpdateProc `intSliderGrp -q -v startCurveSLD` `intSliderGrp -q -v endCurveSLD` `intSliderGrp -q -v startLocSLD` `intSliderGrp -q -v endLocSLD`" ;
		scriptJob -p $SeemoosWindow -e "playbackRangeChanged" "UpdateProc `intSliderGrp -q -v startCurveSLD` `intSliderGrp -q -v endCurveSLD` `intSliderGrp -q -v startLocSLD` `intSliderGrp -q -v endLocSLD`" ;
		
// Spacer Attributes

		frameLayout -label "Spacer and Number Settings" -collapse false -collapsable false LocAtt ;
			columnLayout ;
			separator -st none -h 5 ;
			
			radioButtonGrp 	-cw3 90 75 75 -cl3 right left left -numberOfRadioButtons 2 -sl 2
					-label "Use Spacer:" -labelArray2 "On" "Off" 
					-on1 ("")
					-on2 ("") SpacerOnOffrBG ;
			
			radioButtonGrp 	-en on -cw3 90 75 75 -cl3 right left left -numberOfRadioButtons 2 -sl 2
				-label "Use Numbers:" -labelArray2 "On" "Off" NumbersBG ;	

			floatSliderGrp -en on -cw3 90 50 100 -v .25 -min 0 -max 1 -s.01 -field true -l "Num Y Offset:" NumbersYSLD ;		


			separator -st none -h 5 ;
						
			rowLayout -nc 2 -cw2 90 100 ;

			button -en on -w 80 -l "Update Start" -c "intSliderGrp -e -v `playbackOptions -q -min` startLocSLD" startLocBT;
			intSliderGrp -en on -cw2 50 100 -v $startCurve -min `playbackOptions -q -min` -max (`playbackOptions -q -max` - 1 ) -field true startLocSLD ;
			
			setParent .. ;
			separator -st none -h 5 ;
			
			rowLayout -nc 2 -cw2 90 100 ;

			button -en on -w 80 -l "Update End" -c "intSliderGrp -e -v `playbackOptions -q -max` endLocSLD" endLocBT;
			intSliderGrp -en on -cw2 50 100 -v $endCurve -min `playbackOptions -q -min` -max `playbackOptions -q -max` -field true  endLocSLD ;

			setParent .. ;
			separator -st none -h 15 ;

// Spacer Advanced Attributes
						
			radioButtonGrp 	-en on -cw3 90 75 75 -cl3 right left left -numberOfRadioButtons 2 -sl 1
				-label "Spacer Type:" -labelArray2 "Locator" "Sphere" SpacerTyperBG ;
						
			separator -st none -h 5 ;

			floatSliderGrp -en on -cw3 90 50 100 -v 0.3 -min 0.01 -max 1 -s .01 -field true -l "Size:(min .01)" spacerSizeSLD ;
						
			separator -st none -h 5 ;

			intSliderGrp -en on -cw3 90 50 100 -v 1 -min 1 -max 10 -field true -l "Spacing:" spacingSLD ;
			
			separator -st none -h 5 ;			
			setParent .. ;
			
		setParent Base ;

			
	showWindow $SeemoosWindow ;
	
}





global proc SeemoosArcProc (int $startCurve, int $endCurve, int $Pivot, int $Color, int $SpacerOnOff, int $NumbersOnOff, float $numbersY, int $spacerType, int $startLoc, int $endLoc, int $spacing, float $spacerSize, int $getSel, string $selection)
{	
	string $sel[];
	if ($getSel == 1) {
		$sel = `ls -sl`;
	} else {
		$sel = {""+$selection};
	}

	string $spacerObject ;
	string $MCurve ;
	string $CenterLoc ;
	string $SpacerGrp ;
	string $Spacername ;
	string $SpacerArray[];
	int $frame ;
	int $mod ;	
	int $time ;
	
	// Check if Object still selected when Create Button pressed
	if ( size($sel) == 0)
	{		
		print "//error : Please select an object.\n" ;
		return ;
	}

	if ($SpacerOnOff == 2) {
		$SpacerOnOff = 1;
		$spacerSize = 0;
	}

	// Slider Time Check (Curve and Loc)
	 if ($endCurve <= $startCurve || $endCurve - $startCurve < 2 )
		{
		 	int $endCurve = ($startCurve + 2) ;
			intSliderGrp -e -v $endCurve endCurveSLD;
			print "//error : End time must be at least 1 frame higher than start time\n" ;
			return ;
		}

	if ($endCurve - $startCurve >= 500 )
		{
		 	int $endCurve = ($startCurve + 499) ;
			intSliderGrp -e -v $endCurve endCurveSLD;
			print "//error : Sequence too long\n" ;
			return ;
		}

	else if ($SpacerOnOff == 1 && $startLoc < $startCurve)
		{
			int $startLoc = $startCurve ;
			intSliderGrp -e -v $startLoc startLocSLD;
			print "//error : Locators START outside the curve range\n" ;
			return ;
		}

	else if ($SpacerOnOff == 1 && $endLoc > $endCurve)
		{
			int $endLoc = $endCurve ;
			intSliderGrp -e -v $endLoc endLocSLD;
			print "//error : Locators END outside the curve range\n" ;
			return ;
		}


// Spacer Object Check (spacerType to spacerObec)

	if ($spacerType == 1)
		{
			$spacerObject = "spaceLocator" ;
		}

	else if ($spacerType == 2)
		{
			$spacerObject = "sphere" ;
		}

// Time Check so it can return there after for loop

	$time = `currentTime -q` ;

// Parent Loc to objects center if Center is selected as "Arc at Object's".
	
	if ($Pivot == 1)
	{			
		float $originalPositionRot[] = `xform -q -r -rp $sel[0]` ;	
		float $originalPositionSca[] = `xform -q -r -sp $sel[0]` ;

		select $sel[0] ;
		xform -cp ;

		float $CenterLocPos[] = `xform -q -ws -rp $sel[0]` ;
			
		print $CenterLocPos;
		$locResult = `spaceLocator -p $CenterLocPos[0] $CenterLocPos[1] $CenterLocPos[2]`;
		$CenterLoc = `rename Center_Locator` ;
		parent $CenterLoc $sel[0] ;
	
		xform -cp ;
		xform -rp $originalPositionRot[0] $originalPositionRot[1] $originalPositionRot[2] $sel[0] ;
		xform -sp $originalPositionSca[0] $originalPositionSca[1] $originalPositionSca[2] $sel[0] ;
	}

	
	
	cycleCheck -e off;

//LOOP START
 	for ($i=$startCurve;$i<=$endCurve;$i++) 	{
		currentTime $i ;		
		
//Setting $position according to where Line to draw
		
		float $position[] = `xform -q -ws -rp $sel[0]`;				

		if ($Pivot == 1)
		{			
			$position = `xform -q -ws -rp $CenterLoc`;			
		}
				
// Setting $mod depending on $spacing, $startLoc and currentTime.
// If $mod = 0 it will create a Spacer.

		if ($spacing > 1)
		{
			int $offset ;
			
			$offset = $startLoc - $spacing ;			

			$frame = ((`currentTime -q`) - ($spacing*$startLoc) - $offset) ;
			$mod = $frame % $spacing ;			
		}

// Creates first CV of Curve
 		if ($i==$startCurve) 		{ 			curve -d 2 -p $position[0] $position[1] $position[2] ; 			$MCurve = `rename ("perfectArc_Curve_"+$sel[0])` ;
			color -ud $Color ;

// Creates Locator if $startLoc happens to be same as $startCurve 

			if ($SpacerOnOff == 1 && $i == $startLoc )
			{
				eval $spacerObject -p $position[0] $position[1] $position[2] ;
				$Spacername = `rename Spacer1` ;
				xform -cp ;
				scale -r $spacerSize $spacerSize $spacerSize ;
				group ;
				$SpacerGrp = `rename perfectArc_Spacer_Grp1` ;
				color -ud ($Color+3) ;
				
				if ($NumbersOnOff == 1) {
					annotate -p $position[0] ($position[1]+$numbersY) $position[2]  -tx `currentTime -q`;
					$Numbername = `rename NumberN` ;
					setAttr NumberN.displayArrow off;
					$Numbername = `rename Number1` ;
					parent $Numbername $SpacerGrp ;
				}
				
			}													 		}
		
// Creates first Locator if $startLoc != $startCurve and adds CV to Curve (needed so it can create the Spacer Grp)		

		else if ($SpacerOnOff == 1 && $i == $startLoc && $i != $startCurve)
		{
			eval $spacerObject -p $position[0] $position[1] $position[2] ;
			$Spacername = `rename Spacer1` ;
			xform -cp ;
			scale -r $spacerSize $spacerSize $spacerSize ;
			group ;
			$SpacerGrp = `rename perfectArc_Spacer_Grp1` ;
			color -ud ($Color+3);
			curve -a -p $position[0] $position[1] $position[2] $MCurve ;

		}

// Creates Spacers between Start of Spacer range ($startLoc) and end of Spacer range ($endLoc) and adds CV's to Curve
// Spacing Checker

		else if ($SpacerOnOff == 1 && $i > $startLoc && $i <= $endLoc)
		{
			curve -a -p $position[0] $position[1] $position[2] $MCurve ;
			
//Spacing: every frame

			if ($spacing == 1)
			{
				eval $spacerObject -p $position[0] $position[1] $position[2] ;
				$Spacername = `rename Spacer2` ;
				xform -cp ;
				scale -r $spacerSize $spacerSize $spacerSize ; 
				parent $Spacername $SpacerGrp ;
				color -ud ($Color+3) ;

				if ($NumbersOnOff == 1) {
					annotate -p $position[0] ($position[1]+$numbersY) $position[2]  -tx `currentTime -q`;
					$Numbername = `rename NumberN` ;
					setAttr NumberN.displayArrow off;
					$Numbername = `rename Number2` ;
					parent $Numbername $SpacerGrp ;
				}
			}

//Spacing: every 2nd, 3rd, 4th... ($spacing th) or what ever has been selcted in the Spacing SLD frame

			if ($spacing > 1 )
			{
				if ($mod == 0)
				{
					eval $spacerObject -p $position[0] $position[1] $position[2] ;
					$Spacername = `rename Spacer2` ;
					xform -cp ;
					scale -r $spacerSize $spacerSize $spacerSize ; 
					parent $Spacername $SpacerGrp ;
					color -ud ($Color+3) ;

					if ($NumbersOnOff == 1) {
						annotate -p $position[0] ($position[1]+$numbersY) $position[2]  -tx `currentTime -q`;
						$Numbername = `rename NumberN` ;
						setAttr NumberN.displayArrow off;
						$Numbername = `rename Number2` ;
						parent $Numbername $SpacerGrp ;
					}

				}
				
// Creates a Spacer at end of Spacer range ($endLoc)

				if ($i == $endLoc)
				{
					eval $spacerObject -p $position[0] $position[1] $position[2] ;
					$Spacername = `rename Spacer2` ;
					xform -cp ;
					scale -r $spacerSize $spacerSize $spacerSize ; 
					parent $Spacername $SpacerGrp ;
					color -ud ($Color+3) ;

					if ($NumbersOnOff == 1) {
						annotate -p $position[0] ($position[1]+$numbersY) $position[2]  -tx `currentTime -q`;
						$Numbername = `rename NumberN` ;
						setAttr NumberN.displayArrow off;
						$Numbername = `rename Number2` ;
						parent $Numbername $SpacerGrp ;
					}
				}	
			}
		}

// Adds CV's to Curve (only used if no Locators have to be created)
 		else 		{ 			curve -a -p $position[0] $position[1] $position[2] $MCurve ;					 		} 	}

	currentTime $time ;
	select $sel[0] ;

// Delete the Locator created when Center selected at "Arc at Object's"

	if ($Pivot == 1)
	{
		delete $CenterLoc ;
	}
}








global proc UpdateProc (int $startCurve, int $endCurve, int $startLoc, int $endLoc)
{

// Update Selection

	string $sel[] = `ls -sl` ;

	if ($sel[0] == "" )
		return ;
	
	textField -e -tx $sel[0] selObject ;

// Update Time Range

	int $startCurvenew = `playbackOptions -q -min` ;
	int $endCurvenew = `playbackOptions -q -max`;

	
	int $startLocnew = `playbackOptions -q -min` ;
	int $endLocnew = `playbackOptions -q -max`;

// Curve Range	

	if ($startCurve < $startCurvenew )
	{
		intSliderGrp -e -v $startCurvenew -min $startCurvenew -max ($endCurvenew - 1 ) startCurveSLD ;
		
		if ($startCurvenew >= $endCurve)
		{
			intSliderGrp -e -v ($startCurvenew + 1) -min ( $startCurvenew + 1) -max $endCurvenew endCurveSLD ;
		}		
	}

	else if ($endCurve > $endCurvenew )
	{		
		intSliderGrp -e -v $endCurvenew -min ( $startCurvenew + 1) -max $endCurvenew endCurveSLD ;

		if ($endCurvenew <= $startCurve)
		{
			intSliderGrp -e -v ($endCurvenew - 1) -min ( $startCurvenew + 1) -max $endCurvenew startCurveSLD ;
		}
	}

// Spacer Range

	if ($startLoc < $startLocnew )
	{
		intSliderGrp -e -v $startCurvenew -min $startCurvenew -max ($endCurvenew - 1 ) startLocSLD ;
		
		if ($startLocnew >= $endLoc)
		{
			intSliderGrp -e -v ($startCurvenew + 1) -min ( $startCurvenew + 1) -max $endCurvenew endLocSLD ;
		}		
	}

	else if ($endLoc > $endLocnew )
	{		
		intSliderGrp -e -v $endCurvenew -min ( $startCurvenew + 1) -max $endCurvenew endLocSLD ;

		if ($endLocnew <= $startLoc)
		{
			intSliderGrp -e -v ($endCurvenew - 1) -min ( $startCurvenew + 1) -max $endCurvenew startLocSLD ;
		}
	}

	else
	{
		intSliderGrp -e -min $startCurvenew -max ($endCurvenew - 1 ) startCurveSLD ;
		intSliderGrp -e -min ( $startCurvenew + 1) -max $endCurvenew endCurveSLD ;

		intSliderGrp -e -min $startCurvenew -max ($endCurvenew - 1 ) startLocSLD ;
		intSliderGrp -e -min ( $startCurvenew + 1) -max $endCurvenew endLocSLD ;
	}	
}




global proc DeleteCurves ()
{
	string $allCurves[]=`ls -et transform "perfectArc_Curve_*"` ; 
	
	if ( size($allCurves) == 0)
	{
		print "No Curves to delete\n" ;
	}

	else
	{
		for($i=0; $i < (size($allCurves));$i++)
		{ 			 
			delete $allCurves[$i];

			print "Deleted perfectArc_Curve_" ;
			print (substring( (""+$allCurves[$i]), 18, size(""+$allCurves[$i]) )+"\n");
		}
	}
} 

		 
global proc DeleteSpacers ()
{
	string $allSpacers[]=`ls -et transform "perfectArc_Spacer_Grp*"` ; 
	
	if ( size($allSpacers) == 0)
	{
		print "No Spacers to delete\n" ;
	}

	else
	{
		for($i=0; $i < size($allSpacers);$i++)
		{ 	
			delete $allSpacers[$i] ;
			
			$SpacerNumber = $i + 1 ;
			print "Deleted perfectArc_Spacer_Grp" ;
			print (substring( (""+$allSpacers[$i]), 22, size(""+$allSpacers[$i]) )+"\n"); 
		}
	}
}

global proc UpdateArcs (int $startCurve, int $endCurve, int $Pivot, int $Color, int $SpacerOnOff, int $NumbersOnOff, float $numbersY, int $spacerType, int $startLoc, int $endLoc, int $spacing, float $spacerSize)
{
	string $allArcs[] = `ls -et transform "perfectArc_Curve_*"`;
	
	if (size($allArcs) == 0) {
		headsUpMessage "No arcs to update, silly!";
		print ("//error: no arcs to update\n");
		return ;
	}

	else
	{
		string $updateSel[];
		
		for ($i=0; $i < size($allArcs);$i++) {
			$updateSel[$i] = substring( (""+$allArcs[$i]), 18, size(""+$allArcs[$i]) );
			print $updateSel[$i];
		}

		DeleteCurves ();
		DeleteSpacers ();
		for ($i=0; $i < size($allArcs);$i++) {
			if (`objExists ($updateSel[$i])`) {
				SeemoosArcProc ($startCurve, $endCurve, $Pivot, $Color, $SpacerOnOff, $NumbersOnOff, $numbersY, $spacerType, $startLoc, $endLoc, $spacing, $spacerSize, 0, $updateSel[$i]);
			}
		}
	}

}