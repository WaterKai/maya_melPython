//Title:	dwCreateIKFKArm.mel
//Author: 	David Walden
//		www.davidwalden.com
//		dwalden74@hotmail.com
//
//Description: PROCEDURE CREATES FKARM WITH SOME FANCY OPTIONS.
global proc dwCreateFKArm (string $bindingShoulder,			//1st argument...
				int $middleShoulderJoints, 		//2
				int $forearmSplitJoints, 		//3
				int $sideFlagInt, 			//4
				int $elbowAxisInt,			//5
				int $stretchCheck, 			//6
				int $controlColor,			//7
				int $shoulderTypeCheck,			//8
				int $standardShoulderControlType,	//9
				int $FKArmControlType,			//10
				int $stretchAxis, 			//11
				int $fkShldrRotateOrder, 		//12
				int $wristCntrlRotateOrder,		//13
				string $namingPrefix,			//14
				int $lockFKElbowCHECK)			//15
{
//Turn cycleCheck off. Stretchy calculations create cycles on some joints' ".matrix" attr. This is not a problem when animating, however.
cycleCheck -e 0;

//Get initial selection.
string $selection[] = `ls -sl`;

//REPORT ERRORS IF SHOULDER JOINT IS SPECIFIED INCORRECTLY.
if (! `size $bindingShoulder`)
	error ("No shoulder joint specified in UI. Try again.");
if (! `objExists $bindingShoulder`)
	error ("No shoulder joint found with given name (\"" + $bindingShoulder + "\"). Try again.");
	
//Report error if $shoulderTypeCheck is 2. This means the user chose autoShoulder, but autoShoulder only works on an IK rig.
if ($shoulderTypeCheck == 2)
	error "Auto-shoulder setup is available only on an IK arm rig. Select either \"Standard FK\" or \"None\" and try again.";
	

//Assign $prefix.
string $prefix = dwRTAssignPrefix ($namingPrefix, $sideFlagInt);


//ASSIGN $ELBOWAXIS.
string $elbowAxis;
if ($elbowAxisInt == 1)
	{$elbowAxis = "X";}
else if ($elbowAxisInt == 2)
	{$elbowAxis = "Y";}
else if ($elbowAxisInt == 3)
	{$elbowAxis = "Z";}
else if (! $elbowAxisInt)
	error "Elbow´s preferred axis is not selected in UI.";


//GET CURRENT JOINT HIERARCHY.	
string $bindingElbowJoint[];
string $shoulderJoints[];			//Array which contains all binding "shoulder" joints (including first shoulder joint).
string $shoulderJointsTemp[];			//temp array.
$shoulderJoints[0] = $bindingShoulder;		//Assign first member to the first shoulder joint.
int $b;						//Counter integer.

dwReportErrorNegativeJointLength ($shoulderJoints[0]);

if ($middleShoulderJoints)
	{
	for ($b = 0; $b < $middleShoulderJoints; $b++)
		{
		$shoulderJointsTemp = `listRelatives -pa -c -type joint $shoulderJoints[$b]`;	//Place all immediate children into temp array.
		dwReportErrorNegativeJointLength ($shoulderJointsTemp[0]);
		
		$shoulderJoints[$b + 1] = $shoulderJointsTemp[0];				//Put child into real array.
		}
	
	$bindingElbowJoint = `listRelatives -pa -c -type joint $shoulderJoints[$b]`;	
	dwReportErrorNegativeJointLength ($bindingElbowJoint[0]);
	}

else if (! $middleShoulderJoints)
	{
	$bindingElbowJoint = `listRelatives -pa -c -type joint $bindingShoulder`;
	dwReportErrorNegativeJointLength ($bindingElbowJoint[0]);
	}
	
string $forearmJoints[];			//Array which contains all binding "forearm" joints (does NOT include bindingElbow).
string $forearmJointsTemp[];			//temp array.
string $bindingWristJoint[];

if ($forearmSplitJoints)
	{
	$forearmJointsTemp = `listRelatives -pa -c -type joint $bindingElbowJoint[0]`;
	dwReportErrorNegativeJointLength ($forearmJointsTemp[0]);
	
	//Assign first forearm joint as array index zero;
	$forearmJoints[0] = $forearmJointsTemp[0];
	for ($b = 1; $b < $forearmSplitJoints; $b++)
		{
		$forearmJointsTemp = `listRelatives -pa -c -type joint $forearmJoints[$b - 1]`;	//Place all immediate children into temp array.
		$forearmJoints[$b] = $forearmJointsTemp[0];					//Put child into real array.						
		}
	$bindingWristJoint = `listRelatives -pa -c -type joint $forearmJoints[$b - 1]`;
	dwReportErrorNegativeJointLength ($bindingWristJoint[0]);
	}
else if (! $forearmSplitJoints)
	{
	$bindingWristJoint = `listRelatives -pa -c -type joint $bindingElbowJoint[0]`;
	dwReportErrorNegativeJointLength ($bindingWristJoint[0]);
	}

string $bindingHandJoint[] = `listRelatives -pa -c -type joint $bindingWristJoint[0]`;

dwReportErrorNegativeJointLength ($bindingHandJoint[0]);

//IF `LISTRELATIVES` COMMAND RETURNED ZERO (IF THE CHAIN ENDED), REPORT AN ERROR.
if (! `size($bindingHandJoint)`)
	error "Setup must contain hand joint parented to the wrist joint.";





//ASSIGN NEW STRINGS (NOT ARRAYS) TO BINDING HIERARCHY.
string $bindingElbow = $bindingElbowJoint[0];
string $bindingWrist = $bindingWristJoint[0];
string $bindingHand = $bindingHandJoint[0];


$bindingShoulder = $shoulderJoints[0];


string $clavicleJointArray[] = `listRelatives -pa -p -type joint $bindingShoulder`;
string $clavicleJoint;
string $torsoJoint[];

//Assign clavicle variables.
//if ($shoulderTypeCheck == 1)
//	{
	$clavicleJoint = $clavicleJointArray[0];
	$torsoJoint = `listRelatives -pa -p -type joint $clavicleJoint`;
	if (! `size($torsoJoint)`)
		error "No torso joint in hierarchy.";
//	}



//DUPLICATE BINDING ARM AND CREATE FK ARM; ASSIGN VARIABLES.
string $fkShoulder;
string $fkElbow;
string $fkWrist;
string $fkHand;

string $FKHierarchy[] = `duplicate -rc -rr $bindingShoulder`;
$fkShoulder = $FKHierarchy[0];
setAttr ($fkShoulder + ".rotateOrder") $fkShldrRotateOrder;
$fkShoulder = `rename $fkShoulder ($prefix + "FKUpperArm")`;

//DELETE OTHER OBJECTS THAT MAY BE PARENTED TO SHOULDER.
dwDeleteBadChildren($fkShoulder, "joint");

if ($middleShoulderJoints)
	{
	//REMOVE EACH MIDDLE SHOULDER JOINT (UNNECESSARY FOR CONTROL HIERARCHY).
	string $fkMiddleShoulder[];
	for ($b = 0; $b < $middleShoulderJoints; $b++)
		{
		$fkMiddleShoulder = `listRelatives -pa -c -type joint $fkShoulder`;
		dwDeleteBadChildren($fkShoulder, "joint");
		removeJoint $fkMiddleShoulder[0];
		}
	}


string $fkElbowJoint[] = `listRelatives -pa -c -type joint $fkShoulder`;
$fkElbow = `rename $fkElbowJoint[0] ($prefix + "FKElbow")`;

//DELETE OTHER OBJECTS THAT MAY BE PARENTED TO ELBOW.
dwDeleteBadChildren($fkElbow, "joint");

if ($forearmSplitJoints)
	{
	//REMOVE EACH FOREARM JOINT (UNNECESSARY FOR CONTROL HIERARCHY).
	string $fkForearm[];
	for ($b = 0; $b < $forearmSplitJoints; $b++)
		{
		$fkForearm = `listRelatives -pa -c -type joint $fkElbow`;
		//DELETE OTHER OBJECTS THAT MAY BE PARENTED TO FOREARM.
		dwDeleteBadChildren($fkForearm[0], "joint");
		removeJoint $fkForearm[0];
		}
	}

string $fkWristJoint[] = `listRelatives -pa -c -type joint $fkElbow`;
$fkWrist = `rename $fkWristJoint[0] ($prefix + "FKWrist")`;

string $fkHandJoint[] = `listRelatives -pa -c -type joint $fkWrist`;
$fkHand = `rename $fkHandJoint[0] ($prefix + "FKHand")`;

//CHECK TO SEE IF CHAIN HAS ANY FURTHER CHILDREN (JOINTS OR OTHER). IF SO, DELETE THEM.
string $handChildJoints[] = `listRelatives -c -fullPath $fkHand`;
if (size($handChildJoints) > 0)
	delete $handChildJoints;





//CONNECT FK CHAIN´S ROTATIONS TO SKINNING CHAIN. LOCK UNNECESSARY ROTATIONS ON SKINNING CHAIN.
//We need to orient-constrain the upper arm and elbow - direct connections will NOT
//work here because the FK shoulder´s .rotateOrder attr is modified during setup.
//Query Maya version.
float $mayaVersion = `dwRT_GetMayaVersion`;

if ($middleShoulderJoints)
	{
	if ($mayaVersion >= 5.0)
		orientConstraint -skip "x" $fkShoulder $bindingShoulder;
	else
		{
		orientConstraint $fkShoulder $bindingShoulder;
		//Use an "internal MEL" to delete the "rx" connection made by the orient constraint. We need to drive these connections directly.
		CBdeleteConnection ($bindingShoulder + ".rx");
		}
	//DISTRIBUTE X-ROTATION AMONG THE SHOULDER JOINTS.
	dwDistributeRotations ($fkShoulder,
				"rx",
				$shoulderJoints,
				"rx",
				($prefix + "Shoulder_XRot_Divide"));
	}
		
else if (! $middleShoulderJoints)
	orientConstraint $fkShoulder $bindingShoulder;


orientConstraint $fkElbow $bindingElbow;

//Wrist can still be connected via direction connections.
connectAttr ($fkWrist + ".ry") ($bindingWrist + ".ry");
connectAttr ($fkWrist + ".rz") ($bindingWrist + ".rz");
if ($forearmSplitJoints)
	{
	
	dwDistributeRotations ($fkWrist,
				"rx",
				$forearmJoints,
				"rx",
				($prefix + "Forearm_XRot_Divide"));
	}
else if (! $forearmSplitJoints)
	connectAttr ($fkWrist + ".rx") ($bindingWrist + ".rx");

//Set rotateOrder of FK wrist to 1.
if ($forearmSplitJoints)
	setAttr ($fkWrist + ".rotateOrder") 1;
	


//ADD FK CONTROL OBJECTS IF DESIRED IN UI; CREATE CONTROL OBJECTS WITH X-TRANSLATE ATTRIBUTE CONNECTED TO APPROPRIATE JOINT.
//GET THE *ABSOLUTE VALUE* OF THE LENGTH OF THE ELBOW WHICH WILL DETERMINE THE SIZE OF OUR CONTROL SPLINE OBJECTS LATER.
float $armLengthValue = `getAttr ($fkElbow + ".tx")`;
$armLengthValue = abs($armLengthValue);

string $FKshoulderFollowOrientGrp;
string $FKshoulderFreeOrientGrp;
string $FKshoulderFreeOrientConstraint[];

string $fkShoulderOrientGrp;
string $fkElbowOrientGrp;
string $fkWristOrientGrp;

string $fkUpperArmControl;
string $fkElbowControl;
string $fkWristControl;

if ($FKArmControlType > 1)
	{
	//We can just create the FK controls once, using $stretchCheck as an argument...
	$fkShoulderOrientGrp = dwCreateFKControl($fkShoulder, $fkElbow, 1, 1, 
						"orientConstrainRotations", 1, $stretchCheck, 
						$FKArmControlType, ($armLengthValue/1.5), 
						2, $prefix, "FK_UPPERARM_CONTROL");
	$fkElbowOrientGrp = dwCreateFKControl($fkElbow, $fkWrist, 1, 1, 
						"orientConstrainRotations", 1, $stretchCheck, 
						$FKArmControlType, ($armLengthValue/1.5), 
						2, $prefix, "FK_ELBOW_CONTROL");
	
	$fkUpperArmControl = ($prefix + "FK_UPPERARM_CONTROL");
	$fkElbowControl = ($prefix + "FK_ELBOW_CONTROL");
	
	//Lock y- or z- rotations on elbow control.
	//Updated June 18, 2004: Only if $lockFKElbowCHECK has been checked.
	if ($lockFKElbowCHECK)
		{
		if ($elbowAxis == "Y")
			dwLockHideAttributes (0, 0, $fkElbowControl, "rx rz");
		else if ($elbowAxis == "Z")
			dwLockHideAttributes (0, 0, $fkElbowControl, "rx ry");
		}
	
	$fkWristOrientGrp = dwCreateFKControl($fkWrist, $fkHand, 1, 1, 
						"orientConstrainRotations", 1, $stretchCheck, 
						$FKArmControlType, ($armLengthValue/2), 
						2, $prefix, "FK_WRIST_CONTROL");

	$fkWristControl = ($prefix + "FK_WRIST_CONTROL");
		
	parent $fkWristOrientGrp $fkElbowControl;
	parent $fkElbowOrientGrp $fkUpperArmControl;
	
	//Add override color scheme to FK control boxes.
	if ($controlColor > 1)
		{
		setAttr ($fkUpperArmControl + ".overrideEnabled") 1;
		setAttr ($fkUpperArmControl + ".overrideColor") ($controlColor - 1);
		}
		
	setAttr ($fkWristControl + ".rotateOrder") $wristCntrlRotateOrder;
	setAttr ($fkUpperArmControl + ".rotateOrder")$fkShldrRotateOrder;
	
	
	
	//Why only "if"..?
	//if ($shoulderTypeCheck == 1)
	//	{
		//Create "Free_Orient" attr that will allow the FK Shoulder to either follow the upper torso rotations
		//or orient itself independently of the upper torso. The FK Shoulder by default should orient itself
		//*independently* of the upper torso.
		//Create group node which will follow torso orientation.
		
		
		
		$FKshoulderFollowOrientGrp = `group -em -n ($prefix + "Shldr_FollowOrientGrp")`;
		parent $FKshoulderFollowOrientGrp $fkShoulderOrientGrp;
		makeIdentity -t 1 -r 1 $FKshoulderFollowOrientGrp;
		parent $fkUpperArmControl $FKshoulderFollowOrientGrp;
		
		//Create "Free Orient" group node.
		$FKshoulderFreeOrientGrp = `group -em -n ($prefix + "Shldr_FreeOrientGrp")`;
		string $orientTemp[] = `orientConstraint $fkShoulderOrientGrp $FKshoulderFreeOrientGrp`;
		delete $orientTemp;
		pointConstraint $fkShoulder $FKshoulderFreeOrientGrp;
		
		//Create orient constraint.
		$FKshoulderFreeOrientConstraint = `orientConstraint $fkShoulderOrientGrp $FKshoulderFreeOrientGrp $FKshoulderFollowOrientGrp`;
		
		//Create reverse node setup to blend the orient constraint.
		dwBlendByReverse ($fkUpperArmControl, 
					"Free_Orient", 
					($prefix + "Shldr_FreeOrient_Reverse"), 
					($FKshoulderFreeOrientConstraint[0] + "." + $FKshoulderFreeOrientGrp + "W1"), 
					($FKshoulderFreeOrientConstraint[0] + "." + $fkShoulderOrientGrp + "W0"),
					 1);
		
		//UPDATE FOR V. 5.0. SET "INTERPOLATION TYPE" OF ORIENT CONSTRAINT TO "SHORTEST". THIS SEEMS TO WORK WELL
		//AS IT TRIES TO AVOID FLIPPING WHEN BLENDED ORIENTATION DIFFERENCES ARE TOO HIGH.
		if ($mayaVersion >= 5.0)
			setAttr ($FKshoulderFreeOrientConstraint[0] + ".interpType") 2;
		
		//}
	}


//IF USER CHOOSES "STRETCH JOINTS" IN UI, THEN CONNECT CONTROLARM X-TRANSLATION TO BINDING ARM, AND CREATE NODES 
//TO CONTROL X-TRANSLATION OF JOINTS.
if ($stretchCheck)
	{
	float $forearmTXTemp[];
	if ($forearmSplitJoints)
		{
		for ($b = 0; $b < $forearmSplitJoints; $b++)
			{
			$forearmTXTemp[$b] = `getAttr ($forearmJoints[$b] + ".tx")`;
			}
		}
	
	float $shoulderTXTemp[];	//All ".tx" values for middle shoulder joints will be stored here.
	if ($middleShoulderJoints)
		{
		for ($b = 0; $b < $middleShoulderJoints; $b++)
			{
			//GET THE X-TRANSLATION OF EACH OF THE MIDDLE-SHOULDER JOINTS, THEN MAINTAIN THAT AS A PERCENTAGE OF THE 
			//OF THE TOTAL $SHOULDERLENGTH. HERE, $SHOULDERTXTEMP[0] WILL ACTUALLY BE ASSIGNED TO $SHOULDERJOINTS[1],
			//AS $SHOULDERJOINTS[0] IS THE FIRST SHOULDER JOINT.
			$shoulderTXTemp[$b] = `getAttr ($shoulderJoints[$b + 1] + ".tx")`;
			}
		}
	
	
	//Get the actual length of the arm.
	float $lengthFKElbow = dwRTGetDistance ($fkWrist, $fkElbow);
	float $lengthFKShoulder = dwRTGetDistance ($fkElbow, $fkShoulder);
	float $armLength = $lengthFKShoulder + $lengthFKElbow;
	
	
	//CALCULATE MIDDLE SHOULDER JOINTS TRANSLATE-X AS A PERCENTAGE OF TOTAL SHOULDER JOINT.
	//LET THIS BE CALCULATED AUTOMATICALLY AS THE ARM IS STRETCHED.
	if ($middleShoulderJoints)
		{
		float $bicepDivideValue;	//Value determines percentage of each joints´ "tx".
		string $bicepPosition_Divide;	//multiplyDivide node for each middle shoulder joint.
		for ($b = 0; $b < $middleShoulderJoints; $b++)
			{
			//Calculate divide factor for each joint.
			$bicepDivideValue = $lengthFKShoulder/$shoulderTXTemp[$b];
			
			//Create multiplyDivide node and set operation to "divide".
			$bicepPosition_Divide = `createNode -n ($prefix + "BicepPosition" + ($b + 1) + "_Divide") multiplyDivide`;
			setAttr ($bicepPosition_Divide + ".operation") 2;
			
			//Connect $controlElbow.tx to first input.
			connectAttr ($fkElbow + ".tx") ($bicepPosition_Divide + ".input1X");
			
			//Set value by which it will be divided.
			setAttr ($bicepPosition_Divide + ".input2X") $bicepDivideValue;
			
			//Connect this to corresponding shoulder joint (start with $shoulderJoints[$b + 1],
			//because $shoulderJoints[0] does not translate).
			connectAttr ($bicepPosition_Divide + ".outputX") ($shoulderJoints[$b + 1] + ".tx");
			}
		}
	
	//CALCULATE FOREARM JOINTS´ TRANSLATE-X AS A PERCENTAGE OF TOTAL SHOULDER JOINT.
	//LET THIS BE CALCULATED AUTOMATICALLY AS THE ARM IS STRETCHED.
	if ($forearmSplitJoints)
		{
		float $forearmDivideValue;	//Value determines the percentage of each joints´ tx.
		string $forearmPosition_Divide;	//multiplyDivide node.
		for ($b = 0; $b < $forearmSplitJoints; $b++)
			{
			//Calculate divide factor for each joint.
			$forearmDivideValue = $lengthFKElbow/$forearmTXTemp[$b];	
			
			//Create multiplyDivide node and set operation to "divide".
			$forearmPosition_Divide = `createNode -n ($prefix + "ForearmPosition" + ($b + 1) + "_Divide") multiplyDivide`;
				setAttr ($forearmPosition_Divide + ".operation") 2;
			
			//Connect $controlWrist to first input.
			connectAttr ($fkWrist + ".tx") ($forearmPosition_Divide + ".input1X");
			
			//Set value by which it will be divided.
			setAttr ($forearmPosition_Divide + ".input2X") $forearmDivideValue;
			
			//Connect this to corresponding forearm joint.
			connectAttr ($forearmPosition_Divide + ".outputX") ($forearmJoints[$b] + ".tx");
			}
		}
	
	//POINT CONSTRAIN BINDING HIERARCHY TO CONTROL HIERARCHY.
	pointConstraint -n ($prefix + "BindingElbowPointConstraint") $fkElbow $bindingElbow;
	pointConstraint -n ($prefix + "BindingWristPointConstraint") $fkWrist $bindingWrist;
	pointConstraint -n ($prefix + "BindingHandPointConstraint") $fkHand $bindingHand;
	
	} //END OF "IF ARMSTRETCH"...







//CREATE SHOULDER SETUP IF SELECTED IN UI.
string $clavicleOrientGrp;
string $clavicleCompensateGrp;
string $standardShoulderControlOrientGrp;
string $clavicleFollowTorsoGrp;

string $shoulderControl;
if ($shoulderTypeCheck == 1)
	{
	//CREATE THE CLAVICLE (SHOULDER) CONTROL. CALL dwCreateFKControl TO BUILD CONSTRAINTS AND CONTROL OBJ.
	$standardShoulderControlOrientGrp = dwCreateFKControl ($clavicleJoint, 
							$bindingShoulder, 
							0, 
							1, 
							"orientConstrainRotations", 
							1, 
							0, 
							$standardShoulderControlType, 
							($armLengthValue/1.5),
							2,
							$prefix,"SHOULDER_CONTROL");
	
	$shoulderControl = ($prefix + "SHOULDER_CONTROL");
	/*
	//ADD GROUP NODE AND PARENT FOR FKCONTROLS.
	if ($FKArmControlType > 1)
		{
		//OLD NAME: $clavicleOrientGrp = `group -em -n ($prefix + "Clavicle_OrientGrp")`;
		$clavicleOrientGrp = `group -em -n ($prefix + "Shldr_FKArm_Clavicle_OrientGrp")`;
		pointConstraint $clavicleJoint $clavicleOrientGrp;
		orientConstraint $clavicleJoint $clavicleOrientGrp;
		
		//OLD NAME: $clavicleCompensateGrp = `group -em -n ($prefix + "Clavicle_CompensateGrp")`;
		$clavicleCompensateGrp = `group -em -n ($prefix + "Shldr_FKArm_Clavicle_CompensateGrp")`;
		parent $clavicleCompensateGrp $clavicleOrientGrp;
		makeIdentity $clavicleCompensateGrp;
			
		parent $fkShoulderOrientGrp $clavicleCompensateGrp;
		}
		*/
	
	//ADD GROUP NODE POINT/ORIENT-CONSTRAINED TO TORSO, WHICH WILL ALLOW CLAVICLE TO FOLLOW TORSO.
	$clavicleFollowTorsoGrp = `group -em -n ($prefix + $clavicleJoint + "_FollowGrp")`;
	pointConstraint $torsoJoint $clavicleFollowTorsoGrp;
	orientConstraint $torsoJoint $clavicleFollowTorsoGrp;
		
	dwLockHideAttributes (0, 0, $clavicleFollowTorsoGrp, "tx ty tz rx ry rz sx sy sz v");
		
	parent $standardShoulderControlOrientGrp $clavicleFollowTorsoGrp;
	
	//Lock and hide attrs on clavicle compensate groups.
	dwLockHideAttributes (0, 0, $standardShoulderControlOrientGrp, "tx ty tz rx ry rz sx sy sz v");
	
	//Lock and hide $clavicleJoint control obj translate values.
	dwLockHideAttributes (0, 0, $shoulderControl, "tx ty tz");

	}



//ADD GROUP NODE AND PARENT FOR FKCONTROLS.
	if ($FKArmControlType > 1)
		{
		//OLD NAME: $clavicleOrientGrp = `group -em -n ($prefix + "Clavicle_OrientGrp")`;
		$clavicleOrientGrp = `group -em -n ($prefix + "Shldr_FKArm_Clavicle_OrientGrp")`;
		pointConstraint $clavicleJoint $clavicleOrientGrp;
		orientConstraint $clavicleJoint $clavicleOrientGrp;
		
		//OLD NAME: $clavicleCompensateGrp = `group -em -n ($prefix + "Clavicle_CompensateGrp")`;
		$clavicleCompensateGrp = `group -em -n ($prefix + "Shldr_FKArm_Clavicle_CompensateGrp")`;
		parent $clavicleCompensateGrp $clavicleOrientGrp;
		makeIdentity $clavicleCompensateGrp;
			
		parent $fkShoulderOrientGrp $clavicleCompensateGrp;
		parent $FKshoulderFreeOrientGrp $clavicleCompensateGrp;
		}




//CLEANUP: PARENT ALL EXTRA CONTOL OBJECTS UNDER ONE LOCKED GROUP.
string $cleanUpGrp;
//If we created any FK arm controls OR any shoulder controls, create a clean-up group.
if (($FKArmControlType > 1) || ($shoulderTypeCheck == 1))
	{
	$cleanUpGrp = `group -em -n ($prefix + "Arm_Controls")`;
	dwLockHideAttributes (0, 0, $cleanUpGrp, "tx ty tz rx ry rz sx sy sz v");
	}
if ($FKArmControlType > 1)
	{
	if ($shoulderTypeCheck == 1)
		{
		parent $FKshoulderFreeOrientGrp $cleanUpGrp;	
		parent $clavicleFollowTorsoGrp $cleanUpGrp;
		}
	
	else if ((! $shoulderTypeCheck) || ($shoulderTypeCheck == 3))
			{
			parent $FKshoulderFreeOrientGrp $cleanUpGrp;
			}
			
	parent $clavicleOrientGrp $cleanUpGrp;
	}

else if ($shoulderTypeCheck == 1)
	parent $clavicleFollowTorsoGrp $cleanUpGrp;


//Turn cycleCheck back on.
cycleCheck -e 1;

//Select initial selection.
select -r $selection;

print ("\n" + "\n" + $prefix + "arm setup complete. \n");

if ($FKArmControlType > 1)
	print ("Control objects can be resized by translating or scaling their CVs.\n");

else 
	print ("No arm control objects were created.\n");
} //END OF PROCEDURE.