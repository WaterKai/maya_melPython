//Title:	dwCreateFreeOrientFKSetup.mel
//Author: 	David Walden
//		www.davidwalden.com
//		dwalden74@hotmail.com
//Date:		March 18, 2004
//
//
//Procedure used to create a "Free_Orient" setup on Fk controls. This allows FK controls to either "follow"
//the orientation of an object above it in the hierarchy, or orient itself "freely" to the world.

global proc string dwCreateFreeOrientFKSetup(string $joint,		//name of joint being controlled - gives us a position.
						string $baseName,	//base name identifier (could be different from joint name, especially if joints have their own naming scheme.).
						string $followObj,	//name of "follow" obj.
						string $controlObj,	//name of control obj that will have "Free_Orient" attr.
						string $orientGrp)	//name of orientGrp that will actually be blended.
{
//Create $freeOrientGrp and pointConstrain to $joint.
string $freeOrientGrp = `group -em -n ($baseName + "_FreeOrientGRP")`;
pointConstraint $joint $freeOrientGrp;

//Update May 5, 2004: free orient grp should still be oriented intially according to original $orientGrp.
string $constraintTemp[] = `orientConstraint $orientGrp $freeOrientGrp`;
delete $constraintTemp;
dwLockHideAttributes (0, 0, $freeOrientGrp, "tx ty tz rx ry rz sx sy sz v");

//Then the "follow" orient grp.
string $followOrientGrp = `group -em -n ($baseName + "_FollowOrientGRP")`;
parent $followOrientGrp $followObj;
$constraintTemp = `pointConstraint $followObj $followOrientGrp`;
delete $constraintTemp;
//makeIdentity -t 1 $followOrientGrp;

//Update May 5, 2004: "follow" orient grp should still be oriented initially according to original $orientGrp.
$constraintTemp = `orientConstraint $orientGrp $followOrientGrp`;
delete $constraintTemp;
dwLockHideAttributes (0, 0, $followOrientGrp, "tx ty tz rx ry rz sx sy sz v");

//Now orient-constrain the orientGrp between the free and the follow grp.
string $freeOrientConstraint[] = `orientConstraint $followOrientGrp $freeOrientGrp $orientGrp`;
dwBlendByReverse ($controlObj, 
			"Free_Orient", 
			($baseName + "_Orient_Reverse"), 
			($freeOrientConstraint[0] + ".w1"),
			($freeOrientConstraint[0] + ".w0"),
			1);


//Set interpType to "shortest" if user is using Maya 5.0 or higher.
float $mayaVersion = `dwRT_GetMayaVersion`;
if ($mayaVersion >= 5.0)
			setAttr ($freeOrientConstraint[0] + ".interpType") 2;

return $freeOrientGrp;
}