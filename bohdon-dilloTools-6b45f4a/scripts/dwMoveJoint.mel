//Title:	dwMoveJoint.mel
//Author:	David Walden
//		www.davidwalden.com
//		dwalden74@hotmail.com

//Procedure moves joint along vector between parent joint and child joint.
global proc dwMoveJoint(float $sliderPosition)
{
string $newJoint[] = `ls -sl -type joint`;
if (size($newJoint) == 0)
	error "No joint selected. Select a joint and retry.";

//pickWalk -d up;
string $jointA[] = `listRelatives -pa -p -type joint $newJoint[0]`;
if (size($jointA) == 0)
	error "Joint must have parent joint.";

//pickWalk -d down;
//pickWalk -d down;
string $jointB[] = `listRelatives -pa -c -type joint $newJoint[0]`;
if (size($jointB[0]) == 0)
	error "Joint must have child joint.";

float $posA[3] = `xform -q -ws -t $jointA[0]`;
float $posB[3] = `xform -q -ws -t $jointB[0]`;

vector $vectorA = <<$posA[0], $posA[1], $posA[2]>>;
vector $vectorB = <<$posB[0], $posB[1], $posB[2]>>;

vector $lengthVector = ($vectorB - $vectorA) * $sliderPosition;
vector $startVector = $lengthVector + $vectorA;

move -a ($startVector.x) ($startVector.y) ($startVector.z) ($newJoint[0] + ".rotatePivot") ($newJoint[0] + ".scalePivot");

move -a $posB[0] $posB[1] $posB[2] $jointB[0];

select -r $newJoint[0];
}