/////////////////////////////////////////////////////////////////////////

global proc dilloRez() {

	// sets window name

	string $winName = "dilloRez";
	string $blendNodes1[] = `ls -typ blendShape`;
	global int $blendNum;
	global string $blendNode;
	
	//check if window exist
	//if it does delete it
	
	if (`window -ex $winName`==true)
	deleteUI $winName; 
	
	//creates window
	window -t "MJ3 - Blend Resurrect - v.1.0.1" -wh 250 430 -rtf 1 $winName;
	
		//formLayout for GUI
		formLayout mainFormLayout;

			//creates all the necessary stuff for the GUI
			
			string $dilloLine_02 = `text -w 180 -fn boldLabelFont -l "Select blends to re-create:" dilloLine_02`;
			string $refreshBlends = `button -bgc .59  .798 .9 -w 50 -h 20 -c "superRefresh" -l "Refresh" dilloRefreshBlendsButton`;
			string $blendScrollList_01 = `textScrollList -h 286 -w 245 -ams 1 -sc "dilloSelectBlendShape" blendScrollList_01`;
			string $addBlendButton = `button -bgc .59  .798 .9 -w 200 -h 24  -al "center" -c "dilloDupOff ( $blendNum,$blendNode )" -l "Re-Create Blendshape Geo" addBlendButton`;
			string $blendWarning = `text -w 180 -fn smallPlainLabelFont -l " Remember to set all sliders to 0 first!" dilloWarn_01`;
			
			optionMenu -bgc .8 .8 .8 -label "Blend Nodes" -cc "doubleProcRunNode" blendNodeMenu_01;
				// menuItem -label "Select Blend Node";
				for ($b in $blendNodes1) {
					menuItem -label $b;
					};

// This edits the layout
	
	formLayout -edit

		-ac $dilloLine_02				"top" 	5  	blendNodeMenu_01
		-af $dilloLine_02				"left" 	5
	
		-af	dilloRefreshBlendsButton	"top" 	2
		-af dilloRefreshBlendsButton	"right" 5
	
		-ac	$blendScrollList_01 		"top"	5	$dilloLine_02
		-af	$blendScrollList_01			"left" 	5
	
		-af	$addBlendButton				"left" 	28
		-ac	$addBlendButton				"top" 	4	$blendScrollList_01
		
		-ac $blendWarning				"top" 	4	$addBlendButton
		-af	$blendWarning				"left" 	40
		

	mainFormLayout;
	
	//show the window
	showWindow $winName;
};

///////////////////////////////////////////////////////////////
// This starts dilloRez (Now known as Blend Resurrection! //
///////////////////////////////////////////////////////////////
dilloRez;
doubleProcRunNode;


// GLOBAL PROCS ////////////////////////////////////////////////////////////////////////////////////////////////
//------------------------------------------------------------------------------------------------------------//
//	PROC:	doubleProcRunNode
//	
//		This procedure will start the UI and run dilloSelectBlendNode and dilloAddBlend.
//------------------------------------------------------------------------------------------------------------//

global proc  superRefresh() {
	
	dilloRez;
	doubleProcRunNode;
	
	}


global proc doubleProcRunNode() {

	dilloSelectBlendNode;
	dilloAddBlend;
	}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	dilloSelectBlendNode
//	
//		This procedure will select in the scene the blendnode that was selected in the list and assign it to
//		$blendNode.
//------------------------------------------------------------------------------------------------------------//

global proc dilloSelectBlendNode() {
	global string $blendNode;
	
	string $name = `optionMenu -q -v blendNodeMenu_01`;
	select $name;
	$blendNode = $name;
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	dilloSelectBlendShape
//	
//		This procedure will select the blend if it exists and get the index number needed for the
//		rest of the script to run. This is assigned to $blendNum.
//------------------------------------------------------------------------------------------------------------//

global proc dilloSelectBlendShape() {

	//get the name of the selected item
	global int $blendNum;
	global int $selectedName[];
	int $superme;
	int $selectedName[] = `textScrollList -q -sii blendScrollList_01`;

	//buffer for tokenize
	string $buffer[];
	int $i = 0;

	$blendNum = $selectedName[0]-1;
}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	dilloAddBlend
//	
//		This procedure will add all the attribute of the selected object to the textScrollList.
//		IE, it populates the textScrollList with all the shape targets a blend node has.
//------------------------------------------------------------------------------------------------------------//

global proc dilloAddBlend() {

	global int $dillInt = 0;

	//clear the large blend list.
	textScrollList -e -ra blendScrollList_01;

	//add selected objects to $selected[]. This should be $blendNode.
	string $selected[] = `ls -sl`;
	//variable for loop
	string $sel;
	
	//loop through all selected object
	for ($sel in $selected)
	{
		//list atributes of selected objects
		string $blendAttrs[]=`listAttr -m -s -r -c -k -v $sel`;
		string $attr;
		
		//loop through all attributes and add them to the textScrollList
		for ($attr in $blendAttrs) {
			//check if the object is already on the list
			string $attrList[] = `textScrollList -q -ai blendScrollList_01`;
			int $dup = 0;
			
			for ($attrExist in $attrList) {
				if (($sel+"."+$attr) == $attrExist) $dup = 1;
			}
			
			//if dup was not set to true, then the object is not already on the list
			if ($dup == 0) {
				string $match = `match "envelope" $attr`;
				if ($match != "envelope")
				textScrollList -e -a ($dillInt+"- "+$sel+"."+$attr) blendScrollList_01;
				$dillInt++;
			}
		}
	}
	// Reset loop counter.
	$dillInt = 0;
}


//------------------------------------------------------------------------------------------------------------//
//	PROC:	dilloSelectGeo
//	
//		This procedure Selects the main geo.
//		This procedure is no longer needed, as the script now selects the main geo dynamically.
//		But we decided to leave it for debugging later on.
//------------------------------------------------------------------------------------------------------------//

global proc dilloSelectGeo() {

	global string $selectedObject[] ;
	global string $baseHead ;
	global string $myString ;
	global string $wts[];
	int $i = 15;
	$baseHead = `ls -sl`;
	text -e -l $baseHead dilloShape_02;

}

//------------------------------------------------------------------------------------------------------------//
//	PROC:	dilloRebuild
//	
//		This procedure will recreate the specified blendshape and place it away from the original geo,
//		renaming it according to the blendshape node selected.
//------------------------------------------------------------------------------------------------------------//

// Adjusting the slider and dupping off. And then, it connects. Yay. The dupes. You doop. 

global proc dilloDupOff ( int $blendNum, string $blendNode ) {

	global int $blendNum;   		// From the UI
	global string $blendNode;    	// From the UI
	global string $baseGeo;			// From selBaseGeo
	global float $sliderValue[];	// From bbsGetBlendValues
	global string $weights[];		// From bbsGetBlendAttrs
	global string $dupGeo[];		//this stores the newly duplicated object's name
	global string $newBlendPath;	// $newBlendPath is the path for the worldMesh[0] of the newly created blend target.
	global string $blendNodePath;	// $blendNodePath is the path to where the new blend targets need to be connected to.

	global string $storecon[];		// This is used in juan's part that reconnects conenctions

	
	int $concount=0;				//iterator
	int $dupes=0;					//iterator
	int $i=15;						//iterator
	float $u=0;
	int $randy;

	$baseGeo = `selBaseGeo ( $blendNode )`;						
	//makes a call to selbaseGeo to get the base Geometry that slected blend is conencted to

	$sliderValue = `bbsGetBlendValues $blendNode $blendNum`;	
	//gets back all slider values for blendshape and it's inbetween values as well
	
	$weights = `bbsGetBlendAttrs( $blendNode )`;
	//gets weights (the name of the sliders on the blend node).

	//Error Check to see if there is a geo that corresponds to selected blendshape already in the scene
	
	$randy=1;
		
	// print $sliderValue;
	
			for ( $u in $sliderValue ) {
	
				if  (`bbsGetBlendTarget $blendNode $blendNum $u` != "") {
					
					UIerror;
					$randy=0;
					continue;
					}
				}

			if  ($randy==1) {

					
				//This goes through the blends, stores connections, deletes them, dupes off the blend shapes including inbetweens, connects them up and then restores the deleted connections.
				while ($dupes < `size($sliderValue)`) {
				

					//From Juan's Script. This portion is specifically for keeping JS Facial hookups, though it may work for other things.
					//check for incoming connections.

					
					$storecon = `listConnections -p on -c on ($blendNode+"."+$weights[$blendNum])`;
					

					$conNum = size($storecon);


					if($conNum > 0){
						$concount = 0;									//DISCONNECT
						$conpair = size($storecon);							//DISCONNECT
						string $nextAttr = $storecon[$concount+1];			//DISCONNECT
						disconnectAttr($nextAttr) ($storecon[$concount]);	//DISCONNECT
					}
					
					//Dupes off GEO, moves it off and renames it
					
					setAttr (($blendNode+"."+$weights[$blendNum])) $sliderValue[$dupes];
					$dupGeo = `duplicate -rr $baseGeo`;
					string $newName = ($weights[$blendNum]+"_"+($sliderValue[$dupes]*1000)) ;
					
					rename $dupGeo[0] $newName;

					move -r $i 0 0 $newName;
					
					// Connecting the blend.

					// $newBlendPath is the path for the worldMesh[0] of the newly created blend target.
					// $blendNodePath is the path to where the new blend targets need to be connected to.
					// $sliderValues[] is an array of the weights of any blend target in the slider group.
					

					$newBlendPath = ($newName+".worldMesh[0]");
					$blendNodePath = ($blendNode+".inputTarget[0].inputTargetGroup["+$blendNum+"].inputTargetItem["+($sliderValue[$dupes]*1000+5000)+"].inputGeomTarget");
					
					//Actually connects the newly duped off blends to the appropriate blend node
					connectAttr -f $newBlendPath $blendNodePath;
					
					
					//RECONNECT stored connections. fr. JAC
					
				setAttr (($blendNode+"."+$weights[$blendNum])) 0;		// Reset Slider
					
					if($conNum > 0){
						string $nextAttr = $storecon[$concount+1];
						connectAttr($nextAttr) ($storecon[$concount]);
					}
					
					
					// setAttr (($blendNode+"."+$weights[$blendNum])) 0;		// Reset Slider
					
					$dupes++;
					$i += 5;
					
				};
			// setAttr (($blendNode+"."+$weights[$blendNum])) 0;
			}
			};


//Gets the main geo where all the blend nodes go to.
//Shoots out $baseGeo

global proc string selBaseGeo ( string $blendNode ) {

	global string $returnGeo;

	string $connections[] = `listConnections -s 0 ($blendNode+".outputGeometry[0]")`;
	while (`nodeType $connections[0]` != "transform") {
	$connections = `listConnections -s 0 $connections[0]`;
	}

	$returnGeo = $connections[0];
	return $returnGeo;

}


	//get all blendshape values of a blendshape attribute
	//Shoots out $sliderValues[]

global proc float[] bbsGetBlendValues(string $blendShape, int $index) {

	if (!`objExists $blendShape`) return {};
	string $valuesStr[] = `listAttr -m ($blendShape+".inputTarget[0].inputTargetGroup["+$index+"]")`;
	stringArrayRemoveAtIndex(0, $valuesStr);
	int $valueLen = size($valuesStr);
	float $values[] = {};
	
	//remove and isolate number
	for($i = ($valueLen-1); $i >= 0; $i--) {
		if (($i%4) != 0) {
			stringArrayRemoveAtIndex($i, $valuesStr);
		} else {
			$valuesStr[$i] = `substring $valuesStr[$i] (size($valuesStr[$i])-4) (size($valuesStr[$i])-1)`;
			$valuesStr[$i] = (float($valuesStr[$i])-5000)/1000;
		}
	}
	for ($i = 0; $i < size($valuesStr); $i++) {
		$values[$i] = float($valuesStr[$i]);
	}
	return $values;
}

//get all blendshape attributes of a certain blendshape node
//Shoots out $weights[]

global proc string[] bbsGetBlendAttrs( string $blendNode ) {

	global string $blendNode;

	if (!`objExists $blendNode`) return {};
	string $weights[] = `listAttr -m ($blendNode+".w")`;
	return $weights;
};


global proc UIerror () {

	if (`window -ex errorUIWindow`==true)
	deleteUI errorUIWindow;
	
string $errorWindow = `window -menuBar true -mxb true -mnb true -s false -title "Error!" -w 300 -h 150 errorUIWindow`;
    //    create window with menu bar  etc.
string $error = "Error This blendshape already exsists in the scene!!";
    //    text insturctions for the script
string $form = `formLayout`;
    //    form layout
string $textThing = `text -label "TRY AGAIN!   " -fn boldLabelFont`;
    //    add text
string $dashLine = `text -label "-------------------------------------------------------------------------------------------------" -align "center"`;
    //    text break
string $errorThing = `scrollField -wordWrap true -text $error -editable false -w 292 -h 40 errorW`;
string $b1 = `button -label "okay" -command "deleteUI errorUIWindow" -w 50 -h 20 -bgc .59  .798 .9`;
    //    ok button
string $column = `columnLayout -adjustableColumn true`;

formLayout -edit
-af $textThing "top" 5
-af $textThing "left" 115
-ac $dashLine "top" 5 $textThing

-ac $errorThing "top" 10 $dashLine

-ac $b1 "top" 5 $errorThing
-af $b1 "left" 125

$form;

showWindow $errorWindow;
}

//get the object in the scene that corresponds to a blendshape attribute at a certain weights
global proc string bbsGetBlendTarget(string $blendShape, int $index, float $weight) {

	if (!`objExists $blendShape`) return "";
	string $inAttr = ($blendShape+".inputTarget[0].inputTargetGroup["+$index+"].inputTargetItem["+($weight*1000+5000)+"].inputGeomTarget");
	string $blendTargets[] = `listConnections -t shape -d 0 $inAttr`;
	
	return $blendTargets[0];
};

